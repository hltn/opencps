/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package org.opencps.datamgt.model;

import com.liferay.portal.LocaleException;
import com.liferay.portal.kernel.bean.AutoEscape;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.model.BaseModel;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;

import java.io.Serializable;

import java.util.Date;
import java.util.Locale;
import java.util.Map;

/**
 * The base model interface for the DictItem service. Represents a row in the &quot;opencps_dictitem&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This interface and its corresponding implementation {@link org.opencps.datamgt.model.impl.DictItemModelImpl} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link org.opencps.datamgt.model.impl.DictItemImpl}.
 * </p>
 *
 * @author khoavd
 * @see DictItem
 * @see org.opencps.datamgt.model.impl.DictItemImpl
 * @see org.opencps.datamgt.model.impl.DictItemModelImpl
 * @generated
 */
public interface DictItemModel extends BaseModel<DictItem> {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this interface directly. All methods that expect a dict item model instance should use the {@link DictItem} interface instead.
	 */

	/**
	 * Returns the primary key of this dict item.
	 *
	 * @return the primary key of this dict item
	 */
	public long getPrimaryKey();

	/**
	 * Sets the primary key of this dict item.
	 *
	 * @param primaryKey the primary key of this dict item
	 */
	public void setPrimaryKey(long primaryKey);

	/**
	 * Returns the dict item ID of this dict item.
	 *
	 * @return the dict item ID of this dict item
	 */
	public long getDictItemId();

	/**
	 * Sets the dict item ID of this dict item.
	 *
	 * @param dictItemId the dict item ID of this dict item
	 */
	public void setDictItemId(long dictItemId);

	/**
	 * Returns the company ID of this dict item.
	 *
	 * @return the company ID of this dict item
	 */
	public long getCompanyId();

	/**
	 * Sets the company ID of this dict item.
	 *
	 * @param companyId the company ID of this dict item
	 */
	public void setCompanyId(long companyId);

	/**
	 * Returns the group ID of this dict item.
	 *
	 * @return the group ID of this dict item
	 */
	public long getGroupId();

	/**
	 * Sets the group ID of this dict item.
	 *
	 * @param groupId the group ID of this dict item
	 */
	public void setGroupId(long groupId);

	/**
	 * Returns the user ID of this dict item.
	 *
	 * @return the user ID of this dict item
	 */
	public long getUserId();

	/**
	 * Sets the user ID of this dict item.
	 *
	 * @param userId the user ID of this dict item
	 */
	public void setUserId(long userId);

	/**
	 * Returns the user uuid of this dict item.
	 *
	 * @return the user uuid of this dict item
	 * @throws SystemException if a system exception occurred
	 */
	public String getUserUuid() throws SystemException;

	/**
	 * Sets the user uuid of this dict item.
	 *
	 * @param userUuid the user uuid of this dict item
	 */
	public void setUserUuid(String userUuid);

	/**
	 * Returns the create date of this dict item.
	 *
	 * @return the create date of this dict item
	 */
	public Date getCreateDate();

	/**
	 * Sets the create date of this dict item.
	 *
	 * @param createDate the create date of this dict item
	 */
	public void setCreateDate(Date createDate);

	/**
	 * Returns the modified date of this dict item.
	 *
	 * @return the modified date of this dict item
	 */
	public Date getModifiedDate();

	/**
	 * Sets the modified date of this dict item.
	 *
	 * @param modifiedDate the modified date of this dict item
	 */
	public void setModifiedDate(Date modifiedDate);

	/**
	 * Returns the dict collection ID of this dict item.
	 *
	 * @return the dict collection ID of this dict item
	 */
	public long getDictCollectionId();

	/**
	 * Sets the dict collection ID of this dict item.
	 *
	 * @param dictCollectionId the dict collection ID of this dict item
	 */
	public void setDictCollectionId(long dictCollectionId);

	/**
	 * Returns the item code of this dict item.
	 *
	 * @return the item code of this dict item
	 */
	@AutoEscape
	public String getItemCode();

	/**
	 * Sets the item code of this dict item.
	 *
	 * @param itemCode the item code of this dict item
	 */
	public void setItemCode(String itemCode);

	/**
	 * Returns the item name of this dict item.
	 *
	 * @return the item name of this dict item
	 */
	public String getItemName();

	/**
	 * Returns the localized item name of this dict item in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param locale the locale of the language
	 * @return the localized item name of this dict item
	 */
	@AutoEscape
	public String getItemName(Locale locale);

	/**
	 * Returns the localized item name of this dict item in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param locale the local of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized item name of this dict item. If <code>useDefault</code> is <code>false</code> and no localization exists for the requested language, an empty string will be returned.
	 */
	@AutoEscape
	public String getItemName(Locale locale, boolean useDefault);

	/**
	 * Returns the localized item name of this dict item in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @return the localized item name of this dict item
	 */
	@AutoEscape
	public String getItemName(String languageId);

	/**
	 * Returns the localized item name of this dict item in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized item name of this dict item
	 */
	@AutoEscape
	public String getItemName(String languageId, boolean useDefault);

	@AutoEscape
	public String getItemNameCurrentLanguageId();

	@AutoEscape
	public String getItemNameCurrentValue();

	/**
	 * Returns a map of the locales and localized item names of this dict item.
	 *
	 * @return the locales and localized item names of this dict item
	 */
	public Map<Locale, String> getItemNameMap();

	/**
	 * Sets the item name of this dict item.
	 *
	 * @param itemName the item name of this dict item
	 */
	public void setItemName(String itemName);

	/**
	 * Sets the localized item name of this dict item in the language.
	 *
	 * @param itemName the localized item name of this dict item
	 * @param locale the locale of the language
	 */
	public void setItemName(String itemName, Locale locale);

	/**
	 * Sets the localized item name of this dict item in the language, and sets the default locale.
	 *
	 * @param itemName the localized item name of this dict item
	 * @param locale the locale of the language
	 * @param defaultLocale the default locale
	 */
	public void setItemName(String itemName, Locale locale, Locale defaultLocale);

	public void setItemNameCurrentLanguageId(String languageId);

	/**
	 * Sets the localized item names of this dict item from the map of locales and localized item names.
	 *
	 * @param itemNameMap the locales and localized item names of this dict item
	 */
	public void setItemNameMap(Map<Locale, String> itemNameMap);

	/**
	 * Sets the localized item names of this dict item from the map of locales and localized item names, and sets the default locale.
	 *
	 * @param itemNameMap the locales and localized item names of this dict item
	 * @param defaultLocale the default locale
	 */
	public void setItemNameMap(Map<Locale, String> itemNameMap,
		Locale defaultLocale);

	/**
	 * Returns the item description of this dict item.
	 *
	 * @return the item description of this dict item
	 */
	public String getItemDescription();

	/**
	 * Returns the localized item description of this dict item in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param locale the locale of the language
	 * @return the localized item description of this dict item
	 */
	@AutoEscape
	public String getItemDescription(Locale locale);

	/**
	 * Returns the localized item description of this dict item in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param locale the local of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized item description of this dict item. If <code>useDefault</code> is <code>false</code> and no localization exists for the requested language, an empty string will be returned.
	 */
	@AutoEscape
	public String getItemDescription(Locale locale, boolean useDefault);

	/**
	 * Returns the localized item description of this dict item in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @return the localized item description of this dict item
	 */
	@AutoEscape
	public String getItemDescription(String languageId);

	/**
	 * Returns the localized item description of this dict item in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized item description of this dict item
	 */
	@AutoEscape
	public String getItemDescription(String languageId, boolean useDefault);

	@AutoEscape
	public String getItemDescriptionCurrentLanguageId();

	@AutoEscape
	public String getItemDescriptionCurrentValue();

	/**
	 * Returns a map of the locales and localized item descriptions of this dict item.
	 *
	 * @return the locales and localized item descriptions of this dict item
	 */
	public Map<Locale, String> getItemDescriptionMap();

	/**
	 * Sets the item description of this dict item.
	 *
	 * @param itemDescription the item description of this dict item
	 */
	public void setItemDescription(String itemDescription);

	/**
	 * Sets the localized item description of this dict item in the language.
	 *
	 * @param itemDescription the localized item description of this dict item
	 * @param locale the locale of the language
	 */
	public void setItemDescription(String itemDescription, Locale locale);

	/**
	 * Sets the localized item description of this dict item in the language, and sets the default locale.
	 *
	 * @param itemDescription the localized item description of this dict item
	 * @param locale the locale of the language
	 * @param defaultLocale the default locale
	 */
	public void setItemDescription(String itemDescription, Locale locale,
		Locale defaultLocale);

	public void setItemDescriptionCurrentLanguageId(String languageId);

	/**
	 * Sets the localized item descriptions of this dict item from the map of locales and localized item descriptions.
	 *
	 * @param itemDescriptionMap the locales and localized item descriptions of this dict item
	 */
	public void setItemDescriptionMap(Map<Locale, String> itemDescriptionMap);

	/**
	 * Sets the localized item descriptions of this dict item from the map of locales and localized item descriptions, and sets the default locale.
	 *
	 * @param itemDescriptionMap the locales and localized item descriptions of this dict item
	 * @param defaultLocale the default locale
	 */
	public void setItemDescriptionMap(Map<Locale, String> itemDescriptionMap,
		Locale defaultLocale);

	/**
	 * Returns the parent item ID of this dict item.
	 *
	 * @return the parent item ID of this dict item
	 */
	public long getParentItemId();

	/**
	 * Sets the parent item ID of this dict item.
	 *
	 * @param parentItemId the parent item ID of this dict item
	 */
	public void setParentItemId(long parentItemId);

	/**
	 * Returns the tree index of this dict item.
	 *
	 * @return the tree index of this dict item
	 */
	@AutoEscape
	public String getTreeIndex();

	/**
	 * Sets the tree index of this dict item.
	 *
	 * @param treeIndex the tree index of this dict item
	 */
	public void setTreeIndex(String treeIndex);

	/**
	 * Returns the issue status of this dict item.
	 *
	 * @return the issue status of this dict item
	 */
	public int getIssueStatus();

	/**
	 * Sets the issue status of this dict item.
	 *
	 * @param issueStatus the issue status of this dict item
	 */
	public void setIssueStatus(int issueStatus);

	/**
	 * Returns the dict version ID of this dict item.
	 *
	 * @return the dict version ID of this dict item
	 */
	public long getDictVersionId();

	/**
	 * Sets the dict version ID of this dict item.
	 *
	 * @param dictVersionId the dict version ID of this dict item
	 */
	public void setDictVersionId(long dictVersionId);

	@Override
	public boolean isNew();

	@Override
	public void setNew(boolean n);

	@Override
	public boolean isCachedModel();

	@Override
	public void setCachedModel(boolean cachedModel);

	@Override
	public boolean isEscapedModel();

	@Override
	public Serializable getPrimaryKeyObj();

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj);

	@Override
	public ExpandoBridge getExpandoBridge();

	@Override
	public void setExpandoBridgeAttributes(BaseModel<?> baseModel);

	@Override
	public void setExpandoBridgeAttributes(ExpandoBridge expandoBridge);

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext);

	public String[] getAvailableLanguageIds();

	public String getDefaultLanguageId();

	public void prepareLocalizedFieldsForImport() throws LocaleException;

	public void prepareLocalizedFieldsForImport(Locale defaultImportLocale)
		throws LocaleException;

	@Override
	public Object clone();

	@Override
	public int compareTo(org.opencps.datamgt.model.DictItem dictItem);

	@Override
	public int hashCode();

	@Override
	public CacheModel<org.opencps.datamgt.model.DictItem> toCacheModel();

	@Override
	public org.opencps.datamgt.model.DictItem toEscapedModel();

	@Override
	public org.opencps.datamgt.model.DictItem toUnescapedModel();

	@Override
	public String toString();

	@Override
	public String toXmlString();
}