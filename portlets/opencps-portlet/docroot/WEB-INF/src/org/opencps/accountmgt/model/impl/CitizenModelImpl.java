/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package org.opencps.accountmgt.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import org.opencps.accountmgt.model.Citizen;
import org.opencps.accountmgt.model.CitizenModel;
import org.opencps.accountmgt.model.CitizenSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the Citizen service. Represents a row in the &quot;opencps_acc_citizen&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link org.opencps.accountmgt.model.CitizenModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link CitizenImpl}.
 * </p>
 *
 * @author khoavd
 * @see CitizenImpl
 * @see org.opencps.accountmgt.model.Citizen
 * @see org.opencps.accountmgt.model.CitizenModel
 * @generated
 */
@JSON(strict = true)
public class CitizenModelImpl extends BaseModelImpl<Citizen>
	implements CitizenModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a citizen model instance should use the {@link org.opencps.accountmgt.model.Citizen} interface instead.
	 */
	public static final String TABLE_NAME = "opencps_acc_citizen";
	public static final Object[][] TABLE_COLUMNS = {
			{ "citizenId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "uuid_", Types.VARCHAR },
			{ "fullName", Types.VARCHAR },
			{ "personalId", Types.VARCHAR },
			{ "gender", Types.INTEGER },
			{ "birthdate", Types.TIMESTAMP },
			{ "address", Types.VARCHAR },
			{ "cityCode", Types.VARCHAR },
			{ "districtCode", Types.VARCHAR },
			{ "wardCode", Types.VARCHAR },
			{ "telNo", Types.VARCHAR },
			{ "email", Types.VARCHAR },
			{ "attachFile", Types.BIGINT },
			{ "mappingUserId", Types.BIGINT },
			{ "accountStatus", Types.INTEGER }
		};
	public static final String TABLE_SQL_CREATE = "create table opencps_acc_citizen (citizenId LONG not null primary key,companyId LONG,groupId LONG,userId LONG,createDate DATE null,modifiedDate DATE null,uuid_ VARCHAR(75) null,fullName VARCHAR(75) null,personalId VARCHAR(75) null,gender INTEGER,birthdate DATE null,address VARCHAR(75) null,cityCode VARCHAR(75) null,districtCode VARCHAR(75) null,wardCode VARCHAR(75) null,telNo VARCHAR(75) null,email VARCHAR(75) null,attachFile LONG,mappingUserId LONG,accountStatus INTEGER)";
	public static final String TABLE_SQL_DROP = "drop table opencps_acc_citizen";
	public static final String ORDER_BY_JPQL = " ORDER BY citizen.createDate DESC";
	public static final String ORDER_BY_SQL = " ORDER BY opencps_acc_citizen.createDate DESC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.org.opencps.accountmgt.model.Citizen"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.org.opencps.accountmgt.model.Citizen"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.org.opencps.accountmgt.model.Citizen"),
			true);
	public static long ACCOUNTSTATUS_COLUMN_BITMASK = 1L;
	public static long CITYCODE_COLUMN_BITMASK = 2L;
	public static long DISTRICTCODE_COLUMN_BITMASK = 4L;
	public static long EMAIL_COLUMN_BITMASK = 8L;
	public static long FULLNAME_COLUMN_BITMASK = 16L;
	public static long GROUPID_COLUMN_BITMASK = 32L;
	public static long MAPPINGUSERID_COLUMN_BITMASK = 64L;
	public static long UUID_COLUMN_BITMASK = 128L;
	public static long WARDCODE_COLUMN_BITMASK = 256L;
	public static long CREATEDATE_COLUMN_BITMASK = 512L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Citizen toModel(CitizenSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Citizen model = new CitizenImpl();

		model.setCitizenId(soapModel.getCitizenId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setGroupId(soapModel.getGroupId());
		model.setUserId(soapModel.getUserId());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setUuid(soapModel.getUuid());
		model.setFullName(soapModel.getFullName());
		model.setPersonalId(soapModel.getPersonalId());
		model.setGender(soapModel.getGender());
		model.setBirthdate(soapModel.getBirthdate());
		model.setAddress(soapModel.getAddress());
		model.setCityCode(soapModel.getCityCode());
		model.setDistrictCode(soapModel.getDistrictCode());
		model.setWardCode(soapModel.getWardCode());
		model.setTelNo(soapModel.getTelNo());
		model.setEmail(soapModel.getEmail());
		model.setAttachFile(soapModel.getAttachFile());
		model.setMappingUserId(soapModel.getMappingUserId());
		model.setAccountStatus(soapModel.getAccountStatus());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Citizen> toModels(CitizenSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Citizen> models = new ArrayList<Citizen>(soapModels.length);

		for (CitizenSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.org.opencps.accountmgt.model.Citizen"));

	public CitizenModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _citizenId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setCitizenId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _citizenId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Citizen.class;
	}

	@Override
	public String getModelClassName() {
		return Citizen.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("citizenId", getCitizenId());
		attributes.put("companyId", getCompanyId());
		attributes.put("groupId", getGroupId());
		attributes.put("userId", getUserId());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("uuid", getUuid());
		attributes.put("fullName", getFullName());
		attributes.put("personalId", getPersonalId());
		attributes.put("gender", getGender());
		attributes.put("birthdate", getBirthdate());
		attributes.put("address", getAddress());
		attributes.put("cityCode", getCityCode());
		attributes.put("districtCode", getDistrictCode());
		attributes.put("wardCode", getWardCode());
		attributes.put("telNo", getTelNo());
		attributes.put("email", getEmail());
		attributes.put("attachFile", getAttachFile());
		attributes.put("mappingUserId", getMappingUserId());
		attributes.put("accountStatus", getAccountStatus());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long citizenId = (Long)attributes.get("citizenId");

		if (citizenId != null) {
			setCitizenId(citizenId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		String uuid = (String)attributes.get("uuid");

		if (uuid != null) {
			setUuid(uuid);
		}

		String fullName = (String)attributes.get("fullName");

		if (fullName != null) {
			setFullName(fullName);
		}

		String personalId = (String)attributes.get("personalId");

		if (personalId != null) {
			setPersonalId(personalId);
		}

		Integer gender = (Integer)attributes.get("gender");

		if (gender != null) {
			setGender(gender);
		}

		Date birthdate = (Date)attributes.get("birthdate");

		if (birthdate != null) {
			setBirthdate(birthdate);
		}

		String address = (String)attributes.get("address");

		if (address != null) {
			setAddress(address);
		}

		String cityCode = (String)attributes.get("cityCode");

		if (cityCode != null) {
			setCityCode(cityCode);
		}

		String districtCode = (String)attributes.get("districtCode");

		if (districtCode != null) {
			setDistrictCode(districtCode);
		}

		String wardCode = (String)attributes.get("wardCode");

		if (wardCode != null) {
			setWardCode(wardCode);
		}

		String telNo = (String)attributes.get("telNo");

		if (telNo != null) {
			setTelNo(telNo);
		}

		String email = (String)attributes.get("email");

		if (email != null) {
			setEmail(email);
		}

		Long attachFile = (Long)attributes.get("attachFile");

		if (attachFile != null) {
			setAttachFile(attachFile);
		}

		Long mappingUserId = (Long)attributes.get("mappingUserId");

		if (mappingUserId != null) {
			setMappingUserId(mappingUserId);
		}

		Integer accountStatus = (Integer)attributes.get("accountStatus");

		if (accountStatus != null) {
			setAccountStatus(accountStatus);
		}
	}

	@JSON
	@Override
	public long getCitizenId() {
		return _citizenId;
	}

	@Override
	public void setCitizenId(long citizenId) {
		_citizenId = citizenId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	@Override
	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_columnBitmask = -1L;

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return StringPool.BLANK;
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@JSON
	@Override
	public String getFullName() {
		if (_fullName == null) {
			return StringPool.BLANK;
		}
		else {
			return _fullName;
		}
	}

	@Override
	public void setFullName(String fullName) {
		_columnBitmask |= FULLNAME_COLUMN_BITMASK;

		if (_originalFullName == null) {
			_originalFullName = _fullName;
		}

		_fullName = fullName;
	}

	public String getOriginalFullName() {
		return GetterUtil.getString(_originalFullName);
	}

	@JSON
	@Override
	public String getPersonalId() {
		if (_personalId == null) {
			return StringPool.BLANK;
		}
		else {
			return _personalId;
		}
	}

	@Override
	public void setPersonalId(String personalId) {
		_personalId = personalId;
	}

	@JSON
	@Override
	public int getGender() {
		return _gender;
	}

	@Override
	public void setGender(int gender) {
		_gender = gender;
	}

	@JSON
	@Override
	public Date getBirthdate() {
		return _birthdate;
	}

	@Override
	public void setBirthdate(Date birthdate) {
		_birthdate = birthdate;
	}

	@JSON
	@Override
	public String getAddress() {
		if (_address == null) {
			return StringPool.BLANK;
		}
		else {
			return _address;
		}
	}

	@Override
	public void setAddress(String address) {
		_address = address;
	}

	@JSON
	@Override
	public String getCityCode() {
		if (_cityCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _cityCode;
		}
	}

	@Override
	public void setCityCode(String cityCode) {
		_columnBitmask |= CITYCODE_COLUMN_BITMASK;

		if (_originalCityCode == null) {
			_originalCityCode = _cityCode;
		}

		_cityCode = cityCode;
	}

	public String getOriginalCityCode() {
		return GetterUtil.getString(_originalCityCode);
	}

	@JSON
	@Override
	public String getDistrictCode() {
		if (_districtCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _districtCode;
		}
	}

	@Override
	public void setDistrictCode(String districtCode) {
		_columnBitmask |= DISTRICTCODE_COLUMN_BITMASK;

		if (_originalDistrictCode == null) {
			_originalDistrictCode = _districtCode;
		}

		_districtCode = districtCode;
	}

	public String getOriginalDistrictCode() {
		return GetterUtil.getString(_originalDistrictCode);
	}

	@JSON
	@Override
	public String getWardCode() {
		if (_wardCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _wardCode;
		}
	}

	@Override
	public void setWardCode(String wardCode) {
		_columnBitmask |= WARDCODE_COLUMN_BITMASK;

		if (_originalWardCode == null) {
			_originalWardCode = _wardCode;
		}

		_wardCode = wardCode;
	}

	public String getOriginalWardCode() {
		return GetterUtil.getString(_originalWardCode);
	}

	@JSON
	@Override
	public String getTelNo() {
		if (_telNo == null) {
			return StringPool.BLANK;
		}
		else {
			return _telNo;
		}
	}

	@Override
	public void setTelNo(String telNo) {
		_telNo = telNo;
	}

	@JSON
	@Override
	public String getEmail() {
		if (_email == null) {
			return StringPool.BLANK;
		}
		else {
			return _email;
		}
	}

	@Override
	public void setEmail(String email) {
		_columnBitmask |= EMAIL_COLUMN_BITMASK;

		if (_originalEmail == null) {
			_originalEmail = _email;
		}

		_email = email;
	}

	public String getOriginalEmail() {
		return GetterUtil.getString(_originalEmail);
	}

	@JSON
	@Override
	public long getAttachFile() {
		return _attachFile;
	}

	@Override
	public void setAttachFile(long attachFile) {
		_attachFile = attachFile;
	}

	@JSON
	@Override
	public long getMappingUserId() {
		return _mappingUserId;
	}

	@Override
	public void setMappingUserId(long mappingUserId) {
		_columnBitmask |= MAPPINGUSERID_COLUMN_BITMASK;

		if (!_setOriginalMappingUserId) {
			_setOriginalMappingUserId = true;

			_originalMappingUserId = _mappingUserId;
		}

		_mappingUserId = mappingUserId;
	}

	@Override
	public String getMappingUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getMappingUserId(), "uuid",
			_mappingUserUuid);
	}

	@Override
	public void setMappingUserUuid(String mappingUserUuid) {
		_mappingUserUuid = mappingUserUuid;
	}

	public long getOriginalMappingUserId() {
		return _originalMappingUserId;
	}

	@JSON
	@Override
	public int getAccountStatus() {
		return _accountStatus;
	}

	@Override
	public void setAccountStatus(int accountStatus) {
		_columnBitmask |= ACCOUNTSTATUS_COLUMN_BITMASK;

		if (!_setOriginalAccountStatus) {
			_setOriginalAccountStatus = true;

			_originalAccountStatus = _accountStatus;
		}

		_accountStatus = accountStatus;
	}

	public int getOriginalAccountStatus() {
		return _originalAccountStatus;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			Citizen.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Citizen toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Citizen)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		CitizenImpl citizenImpl = new CitizenImpl();

		citizenImpl.setCitizenId(getCitizenId());
		citizenImpl.setCompanyId(getCompanyId());
		citizenImpl.setGroupId(getGroupId());
		citizenImpl.setUserId(getUserId());
		citizenImpl.setCreateDate(getCreateDate());
		citizenImpl.setModifiedDate(getModifiedDate());
		citizenImpl.setUuid(getUuid());
		citizenImpl.setFullName(getFullName());
		citizenImpl.setPersonalId(getPersonalId());
		citizenImpl.setGender(getGender());
		citizenImpl.setBirthdate(getBirthdate());
		citizenImpl.setAddress(getAddress());
		citizenImpl.setCityCode(getCityCode());
		citizenImpl.setDistrictCode(getDistrictCode());
		citizenImpl.setWardCode(getWardCode());
		citizenImpl.setTelNo(getTelNo());
		citizenImpl.setEmail(getEmail());
		citizenImpl.setAttachFile(getAttachFile());
		citizenImpl.setMappingUserId(getMappingUserId());
		citizenImpl.setAccountStatus(getAccountStatus());

		citizenImpl.resetOriginalValues();

		return citizenImpl;
	}

	@Override
	public int compareTo(Citizen citizen) {
		int value = 0;

		value = DateUtil.compareTo(getCreateDate(), citizen.getCreateDate());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Citizen)) {
			return false;
		}

		Citizen citizen = (Citizen)obj;

		long primaryKey = citizen.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		CitizenModelImpl citizenModelImpl = this;

		citizenModelImpl._originalGroupId = citizenModelImpl._groupId;

		citizenModelImpl._setOriginalGroupId = false;

		citizenModelImpl._originalUuid = citizenModelImpl._uuid;

		citizenModelImpl._originalFullName = citizenModelImpl._fullName;

		citizenModelImpl._originalCityCode = citizenModelImpl._cityCode;

		citizenModelImpl._originalDistrictCode = citizenModelImpl._districtCode;

		citizenModelImpl._originalWardCode = citizenModelImpl._wardCode;

		citizenModelImpl._originalEmail = citizenModelImpl._email;

		citizenModelImpl._originalMappingUserId = citizenModelImpl._mappingUserId;

		citizenModelImpl._setOriginalMappingUserId = false;

		citizenModelImpl._originalAccountStatus = citizenModelImpl._accountStatus;

		citizenModelImpl._setOriginalAccountStatus = false;

		citizenModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Citizen> toCacheModel() {
		CitizenCacheModel citizenCacheModel = new CitizenCacheModel();

		citizenCacheModel.citizenId = getCitizenId();

		citizenCacheModel.companyId = getCompanyId();

		citizenCacheModel.groupId = getGroupId();

		citizenCacheModel.userId = getUserId();

		Date createDate = getCreateDate();

		if (createDate != null) {
			citizenCacheModel.createDate = createDate.getTime();
		}
		else {
			citizenCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			citizenCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			citizenCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		citizenCacheModel.uuid = getUuid();

		String uuid = citizenCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			citizenCacheModel.uuid = null;
		}

		citizenCacheModel.fullName = getFullName();

		String fullName = citizenCacheModel.fullName;

		if ((fullName != null) && (fullName.length() == 0)) {
			citizenCacheModel.fullName = null;
		}

		citizenCacheModel.personalId = getPersonalId();

		String personalId = citizenCacheModel.personalId;

		if ((personalId != null) && (personalId.length() == 0)) {
			citizenCacheModel.personalId = null;
		}

		citizenCacheModel.gender = getGender();

		Date birthdate = getBirthdate();

		if (birthdate != null) {
			citizenCacheModel.birthdate = birthdate.getTime();
		}
		else {
			citizenCacheModel.birthdate = Long.MIN_VALUE;
		}

		citizenCacheModel.address = getAddress();

		String address = citizenCacheModel.address;

		if ((address != null) && (address.length() == 0)) {
			citizenCacheModel.address = null;
		}

		citizenCacheModel.cityCode = getCityCode();

		String cityCode = citizenCacheModel.cityCode;

		if ((cityCode != null) && (cityCode.length() == 0)) {
			citizenCacheModel.cityCode = null;
		}

		citizenCacheModel.districtCode = getDistrictCode();

		String districtCode = citizenCacheModel.districtCode;

		if ((districtCode != null) && (districtCode.length() == 0)) {
			citizenCacheModel.districtCode = null;
		}

		citizenCacheModel.wardCode = getWardCode();

		String wardCode = citizenCacheModel.wardCode;

		if ((wardCode != null) && (wardCode.length() == 0)) {
			citizenCacheModel.wardCode = null;
		}

		citizenCacheModel.telNo = getTelNo();

		String telNo = citizenCacheModel.telNo;

		if ((telNo != null) && (telNo.length() == 0)) {
			citizenCacheModel.telNo = null;
		}

		citizenCacheModel.email = getEmail();

		String email = citizenCacheModel.email;

		if ((email != null) && (email.length() == 0)) {
			citizenCacheModel.email = null;
		}

		citizenCacheModel.attachFile = getAttachFile();

		citizenCacheModel.mappingUserId = getMappingUserId();

		citizenCacheModel.accountStatus = getAccountStatus();

		return citizenCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(41);

		sb.append("{citizenId=");
		sb.append(getCitizenId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", uuid=");
		sb.append(getUuid());
		sb.append(", fullName=");
		sb.append(getFullName());
		sb.append(", personalId=");
		sb.append(getPersonalId());
		sb.append(", gender=");
		sb.append(getGender());
		sb.append(", birthdate=");
		sb.append(getBirthdate());
		sb.append(", address=");
		sb.append(getAddress());
		sb.append(", cityCode=");
		sb.append(getCityCode());
		sb.append(", districtCode=");
		sb.append(getDistrictCode());
		sb.append(", wardCode=");
		sb.append(getWardCode());
		sb.append(", telNo=");
		sb.append(getTelNo());
		sb.append(", email=");
		sb.append(getEmail());
		sb.append(", attachFile=");
		sb.append(getAttachFile());
		sb.append(", mappingUserId=");
		sb.append(getMappingUserId());
		sb.append(", accountStatus=");
		sb.append(getAccountStatus());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(64);

		sb.append("<model><model-name>");
		sb.append("org.opencps.accountmgt.model.Citizen");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>citizenId</column-name><column-value><![CDATA[");
		sb.append(getCitizenId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>uuid</column-name><column-value><![CDATA[");
		sb.append(getUuid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>fullName</column-name><column-value><![CDATA[");
		sb.append(getFullName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>personalId</column-name><column-value><![CDATA[");
		sb.append(getPersonalId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>gender</column-name><column-value><![CDATA[");
		sb.append(getGender());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>birthdate</column-name><column-value><![CDATA[");
		sb.append(getBirthdate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>address</column-name><column-value><![CDATA[");
		sb.append(getAddress());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>cityCode</column-name><column-value><![CDATA[");
		sb.append(getCityCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>districtCode</column-name><column-value><![CDATA[");
		sb.append(getDistrictCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>wardCode</column-name><column-value><![CDATA[");
		sb.append(getWardCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>telNo</column-name><column-value><![CDATA[");
		sb.append(getTelNo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>email</column-name><column-value><![CDATA[");
		sb.append(getEmail());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>attachFile</column-name><column-value><![CDATA[");
		sb.append(getAttachFile());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>mappingUserId</column-name><column-value><![CDATA[");
		sb.append(getMappingUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>accountStatus</column-name><column-value><![CDATA[");
		sb.append(getAccountStatus());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = Citizen.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			Citizen.class
		};
	private long _citizenId;
	private long _companyId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _userId;
	private String _userUuid;
	private Date _createDate;
	private Date _modifiedDate;
	private String _uuid;
	private String _originalUuid;
	private String _fullName;
	private String _originalFullName;
	private String _personalId;
	private int _gender;
	private Date _birthdate;
	private String _address;
	private String _cityCode;
	private String _originalCityCode;
	private String _districtCode;
	private String _originalDistrictCode;
	private String _wardCode;
	private String _originalWardCode;
	private String _telNo;
	private String _email;
	private String _originalEmail;
	private long _attachFile;
	private long _mappingUserId;
	private String _mappingUserUuid;
	private long _originalMappingUserId;
	private boolean _setOriginalMappingUserId;
	private int _accountStatus;
	private int _originalAccountStatus;
	private boolean _setOriginalAccountStatus;
	private long _columnBitmask;
	private Citizen _escapedModel;
}