/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package org.opencps.accountmgt.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import org.opencps.accountmgt.model.BusinessDomain;
import org.opencps.accountmgt.model.BusinessDomainModel;
import org.opencps.accountmgt.model.BusinessDomainSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the BusinessDomain service. Represents a row in the &quot;opencps_acc_businessdomain&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link org.opencps.accountmgt.model.BusinessDomainModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link BusinessDomainImpl}.
 * </p>
 *
 * @author khoavd
 * @see BusinessDomainImpl
 * @see org.opencps.accountmgt.model.BusinessDomain
 * @see org.opencps.accountmgt.model.BusinessDomainModel
 * @generated
 */
@JSON(strict = true)
public class BusinessDomainModelImpl extends BaseModelImpl<BusinessDomain>
	implements BusinessDomainModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a business domain model instance should use the {@link org.opencps.accountmgt.model.BusinessDomain} interface instead.
	 */
	public static final String TABLE_NAME = "opencps_acc_businessdomain";
	public static final Object[][] TABLE_COLUMNS = {
			{ "domainId", Types.BIGINT },
			{ "businessId", Types.BIGINT },
			{ "businessDomainCode", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table opencps_acc_businessdomain (domainId LONG not null primary key,businessId LONG,businessDomainCode VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table opencps_acc_businessdomain";
	public static final String ORDER_BY_JPQL = " ORDER BY businessDomain.domainId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY opencps_acc_businessdomain.domainId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.org.opencps.accountmgt.model.BusinessDomain"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.org.opencps.accountmgt.model.BusinessDomain"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.org.opencps.accountmgt.model.BusinessDomain"),
			true);
	public static long BUSINESSDOMAINCODE_COLUMN_BITMASK = 1L;
	public static long BUSINESSID_COLUMN_BITMASK = 2L;
	public static long DOMAINID_COLUMN_BITMASK = 4L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static BusinessDomain toModel(BusinessDomainSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		BusinessDomain model = new BusinessDomainImpl();

		model.setDomainId(soapModel.getDomainId());
		model.setBusinessId(soapModel.getBusinessId());
		model.setBusinessDomainCode(soapModel.getBusinessDomainCode());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<BusinessDomain> toModels(BusinessDomainSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<BusinessDomain> models = new ArrayList<BusinessDomain>(soapModels.length);

		for (BusinessDomainSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.org.opencps.accountmgt.model.BusinessDomain"));

	public BusinessDomainModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _domainId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setDomainId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _domainId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return BusinessDomain.class;
	}

	@Override
	public String getModelClassName() {
		return BusinessDomain.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("domainId", getDomainId());
		attributes.put("businessId", getBusinessId());
		attributes.put("businessDomainCode", getBusinessDomainCode());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long domainId = (Long)attributes.get("domainId");

		if (domainId != null) {
			setDomainId(domainId);
		}

		Long businessId = (Long)attributes.get("businessId");

		if (businessId != null) {
			setBusinessId(businessId);
		}

		String businessDomainCode = (String)attributes.get("businessDomainCode");

		if (businessDomainCode != null) {
			setBusinessDomainCode(businessDomainCode);
		}
	}

	@JSON
	@Override
	public long getDomainId() {
		return _domainId;
	}

	@Override
	public void setDomainId(long domainId) {
		_domainId = domainId;
	}

	@JSON
	@Override
	public long getBusinessId() {
		return _businessId;
	}

	@Override
	public void setBusinessId(long businessId) {
		_columnBitmask |= BUSINESSID_COLUMN_BITMASK;

		if (!_setOriginalBusinessId) {
			_setOriginalBusinessId = true;

			_originalBusinessId = _businessId;
		}

		_businessId = businessId;
	}

	public long getOriginalBusinessId() {
		return _originalBusinessId;
	}

	@JSON
	@Override
	public String getBusinessDomainCode() {
		if (_businessDomainCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _businessDomainCode;
		}
	}

	@Override
	public void setBusinessDomainCode(String businessDomainCode) {
		_columnBitmask |= BUSINESSDOMAINCODE_COLUMN_BITMASK;

		if (_originalBusinessDomainCode == null) {
			_originalBusinessDomainCode = _businessDomainCode;
		}

		_businessDomainCode = businessDomainCode;
	}

	public String getOriginalBusinessDomainCode() {
		return GetterUtil.getString(_originalBusinessDomainCode);
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			BusinessDomain.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public BusinessDomain toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (BusinessDomain)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		BusinessDomainImpl businessDomainImpl = new BusinessDomainImpl();

		businessDomainImpl.setDomainId(getDomainId());
		businessDomainImpl.setBusinessId(getBusinessId());
		businessDomainImpl.setBusinessDomainCode(getBusinessDomainCode());

		businessDomainImpl.resetOriginalValues();

		return businessDomainImpl;
	}

	@Override
	public int compareTo(BusinessDomain businessDomain) {
		long primaryKey = businessDomain.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof BusinessDomain)) {
			return false;
		}

		BusinessDomain businessDomain = (BusinessDomain)obj;

		long primaryKey = businessDomain.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		BusinessDomainModelImpl businessDomainModelImpl = this;

		businessDomainModelImpl._originalBusinessId = businessDomainModelImpl._businessId;

		businessDomainModelImpl._setOriginalBusinessId = false;

		businessDomainModelImpl._originalBusinessDomainCode = businessDomainModelImpl._businessDomainCode;

		businessDomainModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<BusinessDomain> toCacheModel() {
		BusinessDomainCacheModel businessDomainCacheModel = new BusinessDomainCacheModel();

		businessDomainCacheModel.domainId = getDomainId();

		businessDomainCacheModel.businessId = getBusinessId();

		businessDomainCacheModel.businessDomainCode = getBusinessDomainCode();

		String businessDomainCode = businessDomainCacheModel.businessDomainCode;

		if ((businessDomainCode != null) && (businessDomainCode.length() == 0)) {
			businessDomainCacheModel.businessDomainCode = null;
		}

		return businessDomainCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(7);

		sb.append("{domainId=");
		sb.append(getDomainId());
		sb.append(", businessId=");
		sb.append(getBusinessId());
		sb.append(", businessDomainCode=");
		sb.append(getBusinessDomainCode());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(13);

		sb.append("<model><model-name>");
		sb.append("org.opencps.accountmgt.model.BusinessDomain");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>domainId</column-name><column-value><![CDATA[");
		sb.append(getDomainId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>businessId</column-name><column-value><![CDATA[");
		sb.append(getBusinessId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>businessDomainCode</column-name><column-value><![CDATA[");
		sb.append(getBusinessDomainCode());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = BusinessDomain.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			BusinessDomain.class
		};
	private long _domainId;
	private long _businessId;
	private long _originalBusinessId;
	private boolean _setOriginalBusinessId;
	private String _businessDomainCode;
	private String _originalBusinessDomainCode;
	private long _columnBitmask;
	private BusinessDomain _escapedModel;
}