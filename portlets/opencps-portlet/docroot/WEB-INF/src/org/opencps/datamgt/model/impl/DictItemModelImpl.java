/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package org.opencps.datamgt.model.impl;

import com.liferay.portal.LocaleException;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.LocaleUtil;
import com.liferay.portal.kernel.util.LocalizationUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.kernel.util.Validator;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import org.opencps.datamgt.model.DictItem;
import org.opencps.datamgt.model.DictItemModel;
import org.opencps.datamgt.model.DictItemSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.TreeSet;

/**
 * The base model implementation for the DictItem service. Represents a row in the &quot;opencps_dictitem&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link org.opencps.datamgt.model.DictItemModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link DictItemImpl}.
 * </p>
 *
 * @author khoavd
 * @see DictItemImpl
 * @see org.opencps.datamgt.model.DictItem
 * @see org.opencps.datamgt.model.DictItemModel
 * @generated
 */
@JSON(strict = true)
public class DictItemModelImpl extends BaseModelImpl<DictItem>
	implements DictItemModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a dict item model instance should use the {@link org.opencps.datamgt.model.DictItem} interface instead.
	 */
	public static final String TABLE_NAME = "opencps_dictitem";
	public static final Object[][] TABLE_COLUMNS = {
			{ "dictItemId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "dictCollectionId", Types.BIGINT },
			{ "itemCode", Types.VARCHAR },
			{ "itemName", Types.VARCHAR },
			{ "itemDescription", Types.VARCHAR },
			{ "parentItemId", Types.BIGINT },
			{ "treeIndex", Types.VARCHAR },
			{ "issueStatus", Types.INTEGER },
			{ "dictVersionId", Types.BIGINT }
		};
	public static final String TABLE_SQL_CREATE = "create table opencps_dictitem (dictItemId LONG not null primary key,companyId LONG,groupId LONG,userId LONG,createDate DATE null,modifiedDate DATE null,dictCollectionId LONG,itemCode VARCHAR(100) null,itemName STRING null,itemDescription STRING null,parentItemId LONG,treeIndex VARCHAR(75) null,issueStatus INTEGER,dictVersionId LONG)";
	public static final String TABLE_SQL_DROP = "drop table opencps_dictitem";
	public static final String ORDER_BY_JPQL = " ORDER BY dictItem.treeIndex ASC";
	public static final String ORDER_BY_SQL = " ORDER BY opencps_dictitem.treeIndex ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.org.opencps.datamgt.model.DictItem"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.org.opencps.datamgt.model.DictItem"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.org.opencps.datamgt.model.DictItem"),
			true);
	public static long DICTCOLLECTIONID_COLUMN_BITMASK = 1L;
	public static long DICTVERSIONID_COLUMN_BITMASK = 2L;
	public static long ITEMCODE_COLUMN_BITMASK = 4L;
	public static long ITEMNAME_COLUMN_BITMASK = 8L;
	public static long PARENTITEMID_COLUMN_BITMASK = 16L;
	public static long TREEINDEX_COLUMN_BITMASK = 32L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static DictItem toModel(DictItemSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		DictItem model = new DictItemImpl();

		model.setDictItemId(soapModel.getDictItemId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setGroupId(soapModel.getGroupId());
		model.setUserId(soapModel.getUserId());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setDictCollectionId(soapModel.getDictCollectionId());
		model.setItemCode(soapModel.getItemCode());
		model.setItemName(soapModel.getItemName());
		model.setItemDescription(soapModel.getItemDescription());
		model.setParentItemId(soapModel.getParentItemId());
		model.setTreeIndex(soapModel.getTreeIndex());
		model.setIssueStatus(soapModel.getIssueStatus());
		model.setDictVersionId(soapModel.getDictVersionId());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<DictItem> toModels(DictItemSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<DictItem> models = new ArrayList<DictItem>(soapModels.length);

		for (DictItemSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.org.opencps.datamgt.model.DictItem"));

	public DictItemModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _dictItemId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setDictItemId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _dictItemId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return DictItem.class;
	}

	@Override
	public String getModelClassName() {
		return DictItem.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("dictItemId", getDictItemId());
		attributes.put("companyId", getCompanyId());
		attributes.put("groupId", getGroupId());
		attributes.put("userId", getUserId());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("dictCollectionId", getDictCollectionId());
		attributes.put("itemCode", getItemCode());
		attributes.put("itemName", getItemName());
		attributes.put("itemDescription", getItemDescription());
		attributes.put("parentItemId", getParentItemId());
		attributes.put("treeIndex", getTreeIndex());
		attributes.put("issueStatus", getIssueStatus());
		attributes.put("dictVersionId", getDictVersionId());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long dictItemId = (Long)attributes.get("dictItemId");

		if (dictItemId != null) {
			setDictItemId(dictItemId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		Long dictCollectionId = (Long)attributes.get("dictCollectionId");

		if (dictCollectionId != null) {
			setDictCollectionId(dictCollectionId);
		}

		String itemCode = (String)attributes.get("itemCode");

		if (itemCode != null) {
			setItemCode(itemCode);
		}

		String itemName = (String)attributes.get("itemName");

		if (itemName != null) {
			setItemName(itemName);
		}

		String itemDescription = (String)attributes.get("itemDescription");

		if (itemDescription != null) {
			setItemDescription(itemDescription);
		}

		Long parentItemId = (Long)attributes.get("parentItemId");

		if (parentItemId != null) {
			setParentItemId(parentItemId);
		}

		String treeIndex = (String)attributes.get("treeIndex");

		if (treeIndex != null) {
			setTreeIndex(treeIndex);
		}

		Integer issueStatus = (Integer)attributes.get("issueStatus");

		if (issueStatus != null) {
			setIssueStatus(issueStatus);
		}

		Long dictVersionId = (Long)attributes.get("dictVersionId");

		if (dictVersionId != null) {
			setDictVersionId(dictVersionId);
		}
	}

	@JSON
	@Override
	public long getDictItemId() {
		return _dictItemId;
	}

	@Override
	public void setDictItemId(long dictItemId) {
		_dictItemId = dictItemId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_groupId = groupId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	@Override
	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public long getDictCollectionId() {
		return _dictCollectionId;
	}

	@Override
	public void setDictCollectionId(long dictCollectionId) {
		_columnBitmask |= DICTCOLLECTIONID_COLUMN_BITMASK;

		if (!_setOriginalDictCollectionId) {
			_setOriginalDictCollectionId = true;

			_originalDictCollectionId = _dictCollectionId;
		}

		_dictCollectionId = dictCollectionId;
	}

	public long getOriginalDictCollectionId() {
		return _originalDictCollectionId;
	}

	@JSON
	@Override
	public String getItemCode() {
		if (_itemCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _itemCode;
		}
	}

	@Override
	public void setItemCode(String itemCode) {
		_columnBitmask |= ITEMCODE_COLUMN_BITMASK;

		if (_originalItemCode == null) {
			_originalItemCode = _itemCode;
		}

		_itemCode = itemCode;
	}

	public String getOriginalItemCode() {
		return GetterUtil.getString(_originalItemCode);
	}

	@JSON
	@Override
	public String getItemName() {
		if (_itemName == null) {
			return StringPool.BLANK;
		}
		else {
			return _itemName;
		}
	}

	@Override
	public String getItemName(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getItemName(languageId);
	}

	@Override
	public String getItemName(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getItemName(languageId, useDefault);
	}

	@Override
	public String getItemName(String languageId) {
		return LocalizationUtil.getLocalization(getItemName(), languageId);
	}

	@Override
	public String getItemName(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(getItemName(), languageId,
			useDefault);
	}

	@Override
	public String getItemNameCurrentLanguageId() {
		return _itemNameCurrentLanguageId;
	}

	@JSON
	@Override
	public String getItemNameCurrentValue() {
		Locale locale = getLocale(_itemNameCurrentLanguageId);

		return getItemName(locale);
	}

	@Override
	public Map<Locale, String> getItemNameMap() {
		return LocalizationUtil.getLocalizationMap(getItemName());
	}

	@Override
	public void setItemName(String itemName) {
		_columnBitmask |= ITEMNAME_COLUMN_BITMASK;

		if (_originalItemName == null) {
			_originalItemName = _itemName;
		}

		_itemName = itemName;
	}

	@Override
	public void setItemName(String itemName, Locale locale) {
		setItemName(itemName, locale, LocaleUtil.getDefault());
	}

	@Override
	public void setItemName(String itemName, Locale locale, Locale defaultLocale) {
		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(itemName)) {
			setItemName(LocalizationUtil.updateLocalization(getItemName(),
					"ItemName", itemName, languageId, defaultLanguageId));
		}
		else {
			setItemName(LocalizationUtil.removeLocalization(getItemName(),
					"ItemName", languageId));
		}
	}

	@Override
	public void setItemNameCurrentLanguageId(String languageId) {
		_itemNameCurrentLanguageId = languageId;
	}

	@Override
	public void setItemNameMap(Map<Locale, String> itemNameMap) {
		setItemNameMap(itemNameMap, LocaleUtil.getDefault());
	}

	@Override
	public void setItemNameMap(Map<Locale, String> itemNameMap,
		Locale defaultLocale) {
		if (itemNameMap == null) {
			return;
		}

		setItemName(LocalizationUtil.updateLocalization(itemNameMap,
				getItemName(), "ItemName",
				LocaleUtil.toLanguageId(defaultLocale)));
	}

	public String getOriginalItemName() {
		return GetterUtil.getString(_originalItemName);
	}

	@JSON
	@Override
	public String getItemDescription() {
		if (_itemDescription == null) {
			return StringPool.BLANK;
		}
		else {
			return _itemDescription;
		}
	}

	@Override
	public String getItemDescription(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getItemDescription(languageId);
	}

	@Override
	public String getItemDescription(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getItemDescription(languageId, useDefault);
	}

	@Override
	public String getItemDescription(String languageId) {
		return LocalizationUtil.getLocalization(getItemDescription(), languageId);
	}

	@Override
	public String getItemDescription(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(getItemDescription(),
			languageId, useDefault);
	}

	@Override
	public String getItemDescriptionCurrentLanguageId() {
		return _itemDescriptionCurrentLanguageId;
	}

	@JSON
	@Override
	public String getItemDescriptionCurrentValue() {
		Locale locale = getLocale(_itemDescriptionCurrentLanguageId);

		return getItemDescription(locale);
	}

	@Override
	public Map<Locale, String> getItemDescriptionMap() {
		return LocalizationUtil.getLocalizationMap(getItemDescription());
	}

	@Override
	public void setItemDescription(String itemDescription) {
		_itemDescription = itemDescription;
	}

	@Override
	public void setItemDescription(String itemDescription, Locale locale) {
		setItemDescription(itemDescription, locale, LocaleUtil.getDefault());
	}

	@Override
	public void setItemDescription(String itemDescription, Locale locale,
		Locale defaultLocale) {
		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(itemDescription)) {
			setItemDescription(LocalizationUtil.updateLocalization(
					getItemDescription(), "ItemDescription", itemDescription,
					languageId, defaultLanguageId));
		}
		else {
			setItemDescription(LocalizationUtil.removeLocalization(
					getItemDescription(), "ItemDescription", languageId));
		}
	}

	@Override
	public void setItemDescriptionCurrentLanguageId(String languageId) {
		_itemDescriptionCurrentLanguageId = languageId;
	}

	@Override
	public void setItemDescriptionMap(Map<Locale, String> itemDescriptionMap) {
		setItemDescriptionMap(itemDescriptionMap, LocaleUtil.getDefault());
	}

	@Override
	public void setItemDescriptionMap(Map<Locale, String> itemDescriptionMap,
		Locale defaultLocale) {
		if (itemDescriptionMap == null) {
			return;
		}

		setItemDescription(LocalizationUtil.updateLocalization(
				itemDescriptionMap, getItemDescription(), "ItemDescription",
				LocaleUtil.toLanguageId(defaultLocale)));
	}

	@JSON
	@Override
	public long getParentItemId() {
		return _parentItemId;
	}

	@Override
	public void setParentItemId(long parentItemId) {
		_columnBitmask |= PARENTITEMID_COLUMN_BITMASK;

		if (!_setOriginalParentItemId) {
			_setOriginalParentItemId = true;

			_originalParentItemId = _parentItemId;
		}

		_parentItemId = parentItemId;
	}

	public long getOriginalParentItemId() {
		return _originalParentItemId;
	}

	@JSON
	@Override
	public String getTreeIndex() {
		if (_treeIndex == null) {
			return StringPool.BLANK;
		}
		else {
			return _treeIndex;
		}
	}

	@Override
	public void setTreeIndex(String treeIndex) {
		_columnBitmask = -1L;

		if (_originalTreeIndex == null) {
			_originalTreeIndex = _treeIndex;
		}

		_treeIndex = treeIndex;
	}

	public String getOriginalTreeIndex() {
		return GetterUtil.getString(_originalTreeIndex);
	}

	@JSON
	@Override
	public int getIssueStatus() {
		return _issueStatus;
	}

	@Override
	public void setIssueStatus(int issueStatus) {
		_issueStatus = issueStatus;
	}

	@JSON
	@Override
	public long getDictVersionId() {
		return _dictVersionId;
	}

	@Override
	public void setDictVersionId(long dictVersionId) {
		_columnBitmask |= DICTVERSIONID_COLUMN_BITMASK;

		if (!_setOriginalDictVersionId) {
			_setOriginalDictVersionId = true;

			_originalDictVersionId = _dictVersionId;
		}

		_dictVersionId = dictVersionId;
	}

	public long getOriginalDictVersionId() {
		return _originalDictVersionId;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			DictItem.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public String[] getAvailableLanguageIds() {
		Set<String> availableLanguageIds = new TreeSet<String>();

		Map<Locale, String> itemNameMap = getItemNameMap();

		for (Map.Entry<Locale, String> entry : itemNameMap.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		Map<Locale, String> itemDescriptionMap = getItemDescriptionMap();

		for (Map.Entry<Locale, String> entry : itemDescriptionMap.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		return availableLanguageIds.toArray(new String[availableLanguageIds.size()]);
	}

	@Override
	public String getDefaultLanguageId() {
		String xml = getItemName();

		if (xml == null) {
			return StringPool.BLANK;
		}

		Locale defaultLocale = LocaleUtil.getDefault();

		return LocalizationUtil.getDefaultLanguageId(xml, defaultLocale);
	}

	@Override
	public void prepareLocalizedFieldsForImport() throws LocaleException {
		prepareLocalizedFieldsForImport(null);
	}

	@Override
	@SuppressWarnings("unused")
	public void prepareLocalizedFieldsForImport(Locale defaultImportLocale)
		throws LocaleException {
		Locale defaultLocale = LocaleUtil.getDefault();

		String modelDefaultLanguageId = getDefaultLanguageId();

		String itemName = getItemName(defaultLocale);

		if (Validator.isNull(itemName)) {
			setItemName(getItemName(modelDefaultLanguageId), defaultLocale);
		}
		else {
			setItemName(getItemName(defaultLocale), defaultLocale, defaultLocale);
		}

		String itemDescription = getItemDescription(defaultLocale);

		if (Validator.isNull(itemDescription)) {
			setItemDescription(getItemDescription(modelDefaultLanguageId),
				defaultLocale);
		}
		else {
			setItemDescription(getItemDescription(defaultLocale),
				defaultLocale, defaultLocale);
		}
	}

	@Override
	public DictItem toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (DictItem)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		DictItemImpl dictItemImpl = new DictItemImpl();

		dictItemImpl.setDictItemId(getDictItemId());
		dictItemImpl.setCompanyId(getCompanyId());
		dictItemImpl.setGroupId(getGroupId());
		dictItemImpl.setUserId(getUserId());
		dictItemImpl.setCreateDate(getCreateDate());
		dictItemImpl.setModifiedDate(getModifiedDate());
		dictItemImpl.setDictCollectionId(getDictCollectionId());
		dictItemImpl.setItemCode(getItemCode());
		dictItemImpl.setItemName(getItemName());
		dictItemImpl.setItemDescription(getItemDescription());
		dictItemImpl.setParentItemId(getParentItemId());
		dictItemImpl.setTreeIndex(getTreeIndex());
		dictItemImpl.setIssueStatus(getIssueStatus());
		dictItemImpl.setDictVersionId(getDictVersionId());

		dictItemImpl.resetOriginalValues();

		return dictItemImpl;
	}

	@Override
	public int compareTo(DictItem dictItem) {
		int value = 0;

		value = getTreeIndex().compareTo(dictItem.getTreeIndex());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof DictItem)) {
			return false;
		}

		DictItem dictItem = (DictItem)obj;

		long primaryKey = dictItem.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		DictItemModelImpl dictItemModelImpl = this;

		dictItemModelImpl._originalDictCollectionId = dictItemModelImpl._dictCollectionId;

		dictItemModelImpl._setOriginalDictCollectionId = false;

		dictItemModelImpl._originalItemCode = dictItemModelImpl._itemCode;

		dictItemModelImpl._originalItemName = dictItemModelImpl._itemName;

		dictItemModelImpl._originalParentItemId = dictItemModelImpl._parentItemId;

		dictItemModelImpl._setOriginalParentItemId = false;

		dictItemModelImpl._originalTreeIndex = dictItemModelImpl._treeIndex;

		dictItemModelImpl._originalDictVersionId = dictItemModelImpl._dictVersionId;

		dictItemModelImpl._setOriginalDictVersionId = false;

		dictItemModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<DictItem> toCacheModel() {
		DictItemCacheModel dictItemCacheModel = new DictItemCacheModel();

		dictItemCacheModel.dictItemId = getDictItemId();

		dictItemCacheModel.companyId = getCompanyId();

		dictItemCacheModel.groupId = getGroupId();

		dictItemCacheModel.userId = getUserId();

		Date createDate = getCreateDate();

		if (createDate != null) {
			dictItemCacheModel.createDate = createDate.getTime();
		}
		else {
			dictItemCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			dictItemCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			dictItemCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		dictItemCacheModel.dictCollectionId = getDictCollectionId();

		dictItemCacheModel.itemCode = getItemCode();

		String itemCode = dictItemCacheModel.itemCode;

		if ((itemCode != null) && (itemCode.length() == 0)) {
			dictItemCacheModel.itemCode = null;
		}

		dictItemCacheModel.itemName = getItemName();

		String itemName = dictItemCacheModel.itemName;

		if ((itemName != null) && (itemName.length() == 0)) {
			dictItemCacheModel.itemName = null;
		}

		dictItemCacheModel.itemDescription = getItemDescription();

		String itemDescription = dictItemCacheModel.itemDescription;

		if ((itemDescription != null) && (itemDescription.length() == 0)) {
			dictItemCacheModel.itemDescription = null;
		}

		dictItemCacheModel.parentItemId = getParentItemId();

		dictItemCacheModel.treeIndex = getTreeIndex();

		String treeIndex = dictItemCacheModel.treeIndex;

		if ((treeIndex != null) && (treeIndex.length() == 0)) {
			dictItemCacheModel.treeIndex = null;
		}

		dictItemCacheModel.issueStatus = getIssueStatus();

		dictItemCacheModel.dictVersionId = getDictVersionId();

		return dictItemCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(29);

		sb.append("{dictItemId=");
		sb.append(getDictItemId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", dictCollectionId=");
		sb.append(getDictCollectionId());
		sb.append(", itemCode=");
		sb.append(getItemCode());
		sb.append(", itemName=");
		sb.append(getItemName());
		sb.append(", itemDescription=");
		sb.append(getItemDescription());
		sb.append(", parentItemId=");
		sb.append(getParentItemId());
		sb.append(", treeIndex=");
		sb.append(getTreeIndex());
		sb.append(", issueStatus=");
		sb.append(getIssueStatus());
		sb.append(", dictVersionId=");
		sb.append(getDictVersionId());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(46);

		sb.append("<model><model-name>");
		sb.append("org.opencps.datamgt.model.DictItem");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>dictItemId</column-name><column-value><![CDATA[");
		sb.append(getDictItemId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>dictCollectionId</column-name><column-value><![CDATA[");
		sb.append(getDictCollectionId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>itemCode</column-name><column-value><![CDATA[");
		sb.append(getItemCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>itemName</column-name><column-value><![CDATA[");
		sb.append(getItemName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>itemDescription</column-name><column-value><![CDATA[");
		sb.append(getItemDescription());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>parentItemId</column-name><column-value><![CDATA[");
		sb.append(getParentItemId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>treeIndex</column-name><column-value><![CDATA[");
		sb.append(getTreeIndex());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>issueStatus</column-name><column-value><![CDATA[");
		sb.append(getIssueStatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>dictVersionId</column-name><column-value><![CDATA[");
		sb.append(getDictVersionId());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = DictItem.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			DictItem.class
		};
	private long _dictItemId;
	private long _companyId;
	private long _groupId;
	private long _userId;
	private String _userUuid;
	private Date _createDate;
	private Date _modifiedDate;
	private long _dictCollectionId;
	private long _originalDictCollectionId;
	private boolean _setOriginalDictCollectionId;
	private String _itemCode;
	private String _originalItemCode;
	private String _itemName;
	private String _itemNameCurrentLanguageId;
	private String _originalItemName;
	private String _itemDescription;
	private String _itemDescriptionCurrentLanguageId;
	private long _parentItemId;
	private long _originalParentItemId;
	private boolean _setOriginalParentItemId;
	private String _treeIndex;
	private String _originalTreeIndex;
	private int _issueStatus;
	private long _dictVersionId;
	private long _originalDictVersionId;
	private boolean _setOriginalDictVersionId;
	private long _columnBitmask;
	private DictItem _escapedModel;
}