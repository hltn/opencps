/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package org.opencps.usermgt.service.base;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.bean.IdentifiableBean;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.service.BaseServiceImpl;
import com.liferay.portal.service.persistence.UserPersistence;

import org.opencps.usermgt.model.JobPos;
import org.opencps.usermgt.service.JobPosService;
import org.opencps.usermgt.service.persistence.EmployeePersistence;
import org.opencps.usermgt.service.persistence.JobPosPersistence;
import org.opencps.usermgt.service.persistence.WorkingUnitFinder;
import org.opencps.usermgt.service.persistence.WorkingUnitPersistence;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the job pos remote service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link org.opencps.usermgt.service.impl.JobPosServiceImpl}.
 * </p>
 *
 * @author khoavd
 * @see org.opencps.usermgt.service.impl.JobPosServiceImpl
 * @see org.opencps.usermgt.service.JobPosServiceUtil
 * @generated
 */
public abstract class JobPosServiceBaseImpl extends BaseServiceImpl
	implements JobPosService, IdentifiableBean {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Always use {@link org.opencps.usermgt.service.JobPosServiceUtil} to access the job pos remote service.
	 */

	/**
	 * Returns the employee local service.
	 *
	 * @return the employee local service
	 */
	public org.opencps.usermgt.service.EmployeeLocalService getEmployeeLocalService() {
		return employeeLocalService;
	}

	/**
	 * Sets the employee local service.
	 *
	 * @param employeeLocalService the employee local service
	 */
	public void setEmployeeLocalService(
		org.opencps.usermgt.service.EmployeeLocalService employeeLocalService) {
		this.employeeLocalService = employeeLocalService;
	}

	/**
	 * Returns the employee remote service.
	 *
	 * @return the employee remote service
	 */
	public org.opencps.usermgt.service.EmployeeService getEmployeeService() {
		return employeeService;
	}

	/**
	 * Sets the employee remote service.
	 *
	 * @param employeeService the employee remote service
	 */
	public void setEmployeeService(
		org.opencps.usermgt.service.EmployeeService employeeService) {
		this.employeeService = employeeService;
	}

	/**
	 * Returns the employee persistence.
	 *
	 * @return the employee persistence
	 */
	public EmployeePersistence getEmployeePersistence() {
		return employeePersistence;
	}

	/**
	 * Sets the employee persistence.
	 *
	 * @param employeePersistence the employee persistence
	 */
	public void setEmployeePersistence(EmployeePersistence employeePersistence) {
		this.employeePersistence = employeePersistence;
	}

	/**
	 * Returns the job pos local service.
	 *
	 * @return the job pos local service
	 */
	public org.opencps.usermgt.service.JobPosLocalService getJobPosLocalService() {
		return jobPosLocalService;
	}

	/**
	 * Sets the job pos local service.
	 *
	 * @param jobPosLocalService the job pos local service
	 */
	public void setJobPosLocalService(
		org.opencps.usermgt.service.JobPosLocalService jobPosLocalService) {
		this.jobPosLocalService = jobPosLocalService;
	}

	/**
	 * Returns the job pos remote service.
	 *
	 * @return the job pos remote service
	 */
	public org.opencps.usermgt.service.JobPosService getJobPosService() {
		return jobPosService;
	}

	/**
	 * Sets the job pos remote service.
	 *
	 * @param jobPosService the job pos remote service
	 */
	public void setJobPosService(
		org.opencps.usermgt.service.JobPosService jobPosService) {
		this.jobPosService = jobPosService;
	}

	/**
	 * Returns the job pos persistence.
	 *
	 * @return the job pos persistence
	 */
	public JobPosPersistence getJobPosPersistence() {
		return jobPosPersistence;
	}

	/**
	 * Sets the job pos persistence.
	 *
	 * @param jobPosPersistence the job pos persistence
	 */
	public void setJobPosPersistence(JobPosPersistence jobPosPersistence) {
		this.jobPosPersistence = jobPosPersistence;
	}

	/**
	 * Returns the working unit local service.
	 *
	 * @return the working unit local service
	 */
	public org.opencps.usermgt.service.WorkingUnitLocalService getWorkingUnitLocalService() {
		return workingUnitLocalService;
	}

	/**
	 * Sets the working unit local service.
	 *
	 * @param workingUnitLocalService the working unit local service
	 */
	public void setWorkingUnitLocalService(
		org.opencps.usermgt.service.WorkingUnitLocalService workingUnitLocalService) {
		this.workingUnitLocalService = workingUnitLocalService;
	}

	/**
	 * Returns the working unit remote service.
	 *
	 * @return the working unit remote service
	 */
	public org.opencps.usermgt.service.WorkingUnitService getWorkingUnitService() {
		return workingUnitService;
	}

	/**
	 * Sets the working unit remote service.
	 *
	 * @param workingUnitService the working unit remote service
	 */
	public void setWorkingUnitService(
		org.opencps.usermgt.service.WorkingUnitService workingUnitService) {
		this.workingUnitService = workingUnitService;
	}

	/**
	 * Returns the working unit persistence.
	 *
	 * @return the working unit persistence
	 */
	public WorkingUnitPersistence getWorkingUnitPersistence() {
		return workingUnitPersistence;
	}

	/**
	 * Sets the working unit persistence.
	 *
	 * @param workingUnitPersistence the working unit persistence
	 */
	public void setWorkingUnitPersistence(
		WorkingUnitPersistence workingUnitPersistence) {
		this.workingUnitPersistence = workingUnitPersistence;
	}

	/**
	 * Returns the working unit finder.
	 *
	 * @return the working unit finder
	 */
	public WorkingUnitFinder getWorkingUnitFinder() {
		return workingUnitFinder;
	}

	/**
	 * Sets the working unit finder.
	 *
	 * @param workingUnitFinder the working unit finder
	 */
	public void setWorkingUnitFinder(WorkingUnitFinder workingUnitFinder) {
		this.workingUnitFinder = workingUnitFinder;
	}

	/**
	 * Returns the counter local service.
	 *
	 * @return the counter local service
	 */
	public com.liferay.counter.service.CounterLocalService getCounterLocalService() {
		return counterLocalService;
	}

	/**
	 * Sets the counter local service.
	 *
	 * @param counterLocalService the counter local service
	 */
	public void setCounterLocalService(
		com.liferay.counter.service.CounterLocalService counterLocalService) {
		this.counterLocalService = counterLocalService;
	}

	/**
	 * Returns the resource local service.
	 *
	 * @return the resource local service
	 */
	public com.liferay.portal.service.ResourceLocalService getResourceLocalService() {
		return resourceLocalService;
	}

	/**
	 * Sets the resource local service.
	 *
	 * @param resourceLocalService the resource local service
	 */
	public void setResourceLocalService(
		com.liferay.portal.service.ResourceLocalService resourceLocalService) {
		this.resourceLocalService = resourceLocalService;
	}

	/**
	 * Returns the user local service.
	 *
	 * @return the user local service
	 */
	public com.liferay.portal.service.UserLocalService getUserLocalService() {
		return userLocalService;
	}

	/**
	 * Sets the user local service.
	 *
	 * @param userLocalService the user local service
	 */
	public void setUserLocalService(
		com.liferay.portal.service.UserLocalService userLocalService) {
		this.userLocalService = userLocalService;
	}

	/**
	 * Returns the user remote service.
	 *
	 * @return the user remote service
	 */
	public com.liferay.portal.service.UserService getUserService() {
		return userService;
	}

	/**
	 * Sets the user remote service.
	 *
	 * @param userService the user remote service
	 */
	public void setUserService(
		com.liferay.portal.service.UserService userService) {
		this.userService = userService;
	}

	/**
	 * Returns the user persistence.
	 *
	 * @return the user persistence
	 */
	public UserPersistence getUserPersistence() {
		return userPersistence;
	}

	/**
	 * Sets the user persistence.
	 *
	 * @param userPersistence the user persistence
	 */
	public void setUserPersistence(UserPersistence userPersistence) {
		this.userPersistence = userPersistence;
	}

	public void afterPropertiesSet() {
		Class<?> clazz = getClass();

		_classLoader = clazz.getClassLoader();
	}

	public void destroy() {
	}

	/**
	 * Returns the Spring bean ID for this bean.
	 *
	 * @return the Spring bean ID for this bean
	 */
	@Override
	public String getBeanIdentifier() {
		return _beanIdentifier;
	}

	/**
	 * Sets the Spring bean ID for this bean.
	 *
	 * @param beanIdentifier the Spring bean ID for this bean
	 */
	@Override
	public void setBeanIdentifier(String beanIdentifier) {
		_beanIdentifier = beanIdentifier;
	}

	@Override
	public Object invokeMethod(String name, String[] parameterTypes,
		Object[] arguments) throws Throwable {
		Thread currentThread = Thread.currentThread();

		ClassLoader contextClassLoader = currentThread.getContextClassLoader();

		if (contextClassLoader != _classLoader) {
			currentThread.setContextClassLoader(_classLoader);
		}

		try {
			return _clpInvoker.invokeMethod(name, parameterTypes, arguments);
		}
		finally {
			if (contextClassLoader != _classLoader) {
				currentThread.setContextClassLoader(contextClassLoader);
			}
		}
	}

	protected Class<?> getModelClass() {
		return JobPos.class;
	}

	protected String getModelClassName() {
		return JobPos.class.getName();
	}

	/**
	 * Performs an SQL query.
	 *
	 * @param sql the sql query
	 */
	protected void runSQL(String sql) throws SystemException {
		try {
			DataSource dataSource = jobPosPersistence.getDataSource();

			SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
					sql, new int[0]);

			sqlUpdate.update();
		}
		catch (Exception e) {
			throw new SystemException(e);
		}
	}

	@BeanReference(type = org.opencps.usermgt.service.EmployeeLocalService.class)
	protected org.opencps.usermgt.service.EmployeeLocalService employeeLocalService;
	@BeanReference(type = org.opencps.usermgt.service.EmployeeService.class)
	protected org.opencps.usermgt.service.EmployeeService employeeService;
	@BeanReference(type = EmployeePersistence.class)
	protected EmployeePersistence employeePersistence;
	@BeanReference(type = org.opencps.usermgt.service.JobPosLocalService.class)
	protected org.opencps.usermgt.service.JobPosLocalService jobPosLocalService;
	@BeanReference(type = org.opencps.usermgt.service.JobPosService.class)
	protected org.opencps.usermgt.service.JobPosService jobPosService;
	@BeanReference(type = JobPosPersistence.class)
	protected JobPosPersistence jobPosPersistence;
	@BeanReference(type = org.opencps.usermgt.service.WorkingUnitLocalService.class)
	protected org.opencps.usermgt.service.WorkingUnitLocalService workingUnitLocalService;
	@BeanReference(type = org.opencps.usermgt.service.WorkingUnitService.class)
	protected org.opencps.usermgt.service.WorkingUnitService workingUnitService;
	@BeanReference(type = WorkingUnitPersistence.class)
	protected WorkingUnitPersistence workingUnitPersistence;
	@BeanReference(type = WorkingUnitFinder.class)
	protected WorkingUnitFinder workingUnitFinder;
	@BeanReference(type = com.liferay.counter.service.CounterLocalService.class)
	protected com.liferay.counter.service.CounterLocalService counterLocalService;
	@BeanReference(type = com.liferay.portal.service.ResourceLocalService.class)
	protected com.liferay.portal.service.ResourceLocalService resourceLocalService;
	@BeanReference(type = com.liferay.portal.service.UserLocalService.class)
	protected com.liferay.portal.service.UserLocalService userLocalService;
	@BeanReference(type = com.liferay.portal.service.UserService.class)
	protected com.liferay.portal.service.UserService userService;
	@BeanReference(type = UserPersistence.class)
	protected UserPersistence userPersistence;
	private String _beanIdentifier;
	private ClassLoader _classLoader;
	private JobPosServiceClpInvoker _clpInvoker = new JobPosServiceClpInvoker();
}