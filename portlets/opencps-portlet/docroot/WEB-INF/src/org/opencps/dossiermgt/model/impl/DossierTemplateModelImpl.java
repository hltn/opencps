/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package org.opencps.dossiermgt.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import org.opencps.dossiermgt.model.DossierTemplate;
import org.opencps.dossiermgt.model.DossierTemplateModel;
import org.opencps.dossiermgt.model.DossierTemplateSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the DossierTemplate service. Represents a row in the &quot;opencps_dossiertemplate&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link org.opencps.dossiermgt.model.DossierTemplateModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link DossierTemplateImpl}.
 * </p>
 *
 * @author trungnt
 * @see DossierTemplateImpl
 * @see org.opencps.dossiermgt.model.DossierTemplate
 * @see org.opencps.dossiermgt.model.DossierTemplateModel
 * @generated
 */
@JSON(strict = true)
public class DossierTemplateModelImpl extends BaseModelImpl<DossierTemplate>
	implements DossierTemplateModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a dossier template model instance should use the {@link org.opencps.dossiermgt.model.DossierTemplate} interface instead.
	 */
	public static final String TABLE_NAME = "opencps_dossiertemplate";
	public static final Object[][] TABLE_COLUMNS = {
			{ "dossierTemplateId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "templateName", Types.VARCHAR },
			{ "description", Types.VARCHAR },
			{ "templateNo", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table opencps_dossiertemplate (dossierTemplateId LONG not null primary key,companyId LONG,groupId LONG,userId LONG,createDate DATE null,modifiedDate DATE null,templateName VARCHAR(500) null,description STRING null,templateNo VARCHAR(100) null)";
	public static final String TABLE_SQL_DROP = "drop table opencps_dossiertemplate";
	public static final String ORDER_BY_JPQL = " ORDER BY dossierTemplate.dossierTemplateId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY opencps_dossiertemplate.dossierTemplateId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.org.opencps.dossiermgt.model.DossierTemplate"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.org.opencps.dossiermgt.model.DossierTemplate"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.org.opencps.dossiermgt.model.DossierTemplate"),
			true);
	public static long GROUPID_COLUMN_BITMASK = 1L;
	public static long TEMPLATENAME_COLUMN_BITMASK = 2L;
	public static long TEMPLATENO_COLUMN_BITMASK = 4L;
	public static long DOSSIERTEMPLATEID_COLUMN_BITMASK = 8L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static DossierTemplate toModel(DossierTemplateSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		DossierTemplate model = new DossierTemplateImpl();

		model.setDossierTemplateId(soapModel.getDossierTemplateId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setGroupId(soapModel.getGroupId());
		model.setUserId(soapModel.getUserId());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setTemplateName(soapModel.getTemplateName());
		model.setDescription(soapModel.getDescription());
		model.setTemplateNo(soapModel.getTemplateNo());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<DossierTemplate> toModels(
		DossierTemplateSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<DossierTemplate> models = new ArrayList<DossierTemplate>(soapModels.length);

		for (DossierTemplateSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.org.opencps.dossiermgt.model.DossierTemplate"));

	public DossierTemplateModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _dossierTemplateId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setDossierTemplateId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _dossierTemplateId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return DossierTemplate.class;
	}

	@Override
	public String getModelClassName() {
		return DossierTemplate.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("dossierTemplateId", getDossierTemplateId());
		attributes.put("companyId", getCompanyId());
		attributes.put("groupId", getGroupId());
		attributes.put("userId", getUserId());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("templateName", getTemplateName());
		attributes.put("description", getDescription());
		attributes.put("templateNo", getTemplateNo());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long dossierTemplateId = (Long)attributes.get("dossierTemplateId");

		if (dossierTemplateId != null) {
			setDossierTemplateId(dossierTemplateId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		String templateName = (String)attributes.get("templateName");

		if (templateName != null) {
			setTemplateName(templateName);
		}

		String description = (String)attributes.get("description");

		if (description != null) {
			setDescription(description);
		}

		String templateNo = (String)attributes.get("templateNo");

		if (templateNo != null) {
			setTemplateNo(templateNo);
		}
	}

	@JSON
	@Override
	public long getDossierTemplateId() {
		return _dossierTemplateId;
	}

	@Override
	public void setDossierTemplateId(long dossierTemplateId) {
		_dossierTemplateId = dossierTemplateId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	@Override
	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getTemplateName() {
		if (_templateName == null) {
			return StringPool.BLANK;
		}
		else {
			return _templateName;
		}
	}

	@Override
	public void setTemplateName(String templateName) {
		_columnBitmask |= TEMPLATENAME_COLUMN_BITMASK;

		if (_originalTemplateName == null) {
			_originalTemplateName = _templateName;
		}

		_templateName = templateName;
	}

	public String getOriginalTemplateName() {
		return GetterUtil.getString(_originalTemplateName);
	}

	@JSON
	@Override
	public String getDescription() {
		if (_description == null) {
			return StringPool.BLANK;
		}
		else {
			return _description;
		}
	}

	@Override
	public void setDescription(String description) {
		_description = description;
	}

	@JSON
	@Override
	public String getTemplateNo() {
		if (_templateNo == null) {
			return StringPool.BLANK;
		}
		else {
			return _templateNo;
		}
	}

	@Override
	public void setTemplateNo(String templateNo) {
		_columnBitmask |= TEMPLATENO_COLUMN_BITMASK;

		if (_originalTemplateNo == null) {
			_originalTemplateNo = _templateNo;
		}

		_templateNo = templateNo;
	}

	public String getOriginalTemplateNo() {
		return GetterUtil.getString(_originalTemplateNo);
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			DossierTemplate.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public DossierTemplate toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (DossierTemplate)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		DossierTemplateImpl dossierTemplateImpl = new DossierTemplateImpl();

		dossierTemplateImpl.setDossierTemplateId(getDossierTemplateId());
		dossierTemplateImpl.setCompanyId(getCompanyId());
		dossierTemplateImpl.setGroupId(getGroupId());
		dossierTemplateImpl.setUserId(getUserId());
		dossierTemplateImpl.setCreateDate(getCreateDate());
		dossierTemplateImpl.setModifiedDate(getModifiedDate());
		dossierTemplateImpl.setTemplateName(getTemplateName());
		dossierTemplateImpl.setDescription(getDescription());
		dossierTemplateImpl.setTemplateNo(getTemplateNo());

		dossierTemplateImpl.resetOriginalValues();

		return dossierTemplateImpl;
	}

	@Override
	public int compareTo(DossierTemplate dossierTemplate) {
		long primaryKey = dossierTemplate.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof DossierTemplate)) {
			return false;
		}

		DossierTemplate dossierTemplate = (DossierTemplate)obj;

		long primaryKey = dossierTemplate.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		DossierTemplateModelImpl dossierTemplateModelImpl = this;

		dossierTemplateModelImpl._originalGroupId = dossierTemplateModelImpl._groupId;

		dossierTemplateModelImpl._setOriginalGroupId = false;

		dossierTemplateModelImpl._originalTemplateName = dossierTemplateModelImpl._templateName;

		dossierTemplateModelImpl._originalTemplateNo = dossierTemplateModelImpl._templateNo;

		dossierTemplateModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<DossierTemplate> toCacheModel() {
		DossierTemplateCacheModel dossierTemplateCacheModel = new DossierTemplateCacheModel();

		dossierTemplateCacheModel.dossierTemplateId = getDossierTemplateId();

		dossierTemplateCacheModel.companyId = getCompanyId();

		dossierTemplateCacheModel.groupId = getGroupId();

		dossierTemplateCacheModel.userId = getUserId();

		Date createDate = getCreateDate();

		if (createDate != null) {
			dossierTemplateCacheModel.createDate = createDate.getTime();
		}
		else {
			dossierTemplateCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			dossierTemplateCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			dossierTemplateCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		dossierTemplateCacheModel.templateName = getTemplateName();

		String templateName = dossierTemplateCacheModel.templateName;

		if ((templateName != null) && (templateName.length() == 0)) {
			dossierTemplateCacheModel.templateName = null;
		}

		dossierTemplateCacheModel.description = getDescription();

		String description = dossierTemplateCacheModel.description;

		if ((description != null) && (description.length() == 0)) {
			dossierTemplateCacheModel.description = null;
		}

		dossierTemplateCacheModel.templateNo = getTemplateNo();

		String templateNo = dossierTemplateCacheModel.templateNo;

		if ((templateNo != null) && (templateNo.length() == 0)) {
			dossierTemplateCacheModel.templateNo = null;
		}

		return dossierTemplateCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(19);

		sb.append("{dossierTemplateId=");
		sb.append(getDossierTemplateId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", templateName=");
		sb.append(getTemplateName());
		sb.append(", description=");
		sb.append(getDescription());
		sb.append(", templateNo=");
		sb.append(getTemplateNo());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(31);

		sb.append("<model><model-name>");
		sb.append("org.opencps.dossiermgt.model.DossierTemplate");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>dossierTemplateId</column-name><column-value><![CDATA[");
		sb.append(getDossierTemplateId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>templateName</column-name><column-value><![CDATA[");
		sb.append(getTemplateName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>description</column-name><column-value><![CDATA[");
		sb.append(getDescription());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>templateNo</column-name><column-value><![CDATA[");
		sb.append(getTemplateNo());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = DossierTemplate.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			DossierTemplate.class
		};
	private long _dossierTemplateId;
	private long _companyId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _userId;
	private String _userUuid;
	private Date _createDate;
	private Date _modifiedDate;
	private String _templateName;
	private String _originalTemplateName;
	private String _description;
	private String _templateNo;
	private String _originalTemplateNo;
	private long _columnBitmask;
	private DossierTemplate _escapedModel;
}