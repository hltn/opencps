/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package org.opencps.dossiermgt.service.base;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.bean.IdentifiableBean;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.model.PersistedModel;
import com.liferay.portal.service.BaseLocalServiceImpl;
import com.liferay.portal.service.PersistedModelLocalServiceRegistryUtil;
import com.liferay.portal.service.persistence.UserPersistence;

import com.liferay.portlet.asset.service.persistence.AssetEntryPersistence;
import com.liferay.portlet.documentlibrary.service.persistence.DLFileEntryPersistence;
import com.liferay.portlet.documentlibrary.service.persistence.DLFolderPersistence;

import org.opencps.dossiermgt.model.Dossier;
import org.opencps.dossiermgt.service.DossierLocalService;
import org.opencps.dossiermgt.service.persistence.DossierFileFinder;
import org.opencps.dossiermgt.service.persistence.DossierFilePersistence;
import org.opencps.dossiermgt.service.persistence.DossierFinder;
import org.opencps.dossiermgt.service.persistence.DossierLogFinder;
import org.opencps.dossiermgt.service.persistence.DossierLogPersistence;
import org.opencps.dossiermgt.service.persistence.DossierPartPersistence;
import org.opencps.dossiermgt.service.persistence.DossierPersistence;
import org.opencps.dossiermgt.service.persistence.DossierStatusPersistence;
import org.opencps.dossiermgt.service.persistence.DossierTemplatePersistence;
import org.opencps.dossiermgt.service.persistence.FileGroupPersistence;
import org.opencps.dossiermgt.service.persistence.ServiceConfigFinder;
import org.opencps.dossiermgt.service.persistence.ServiceConfigPersistence;

import org.opencps.paymentmgt.service.persistence.PaymentFileFinder;
import org.opencps.paymentmgt.service.persistence.PaymentFilePersistence;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the dossier local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link org.opencps.dossiermgt.service.impl.DossierLocalServiceImpl}.
 * </p>
 *
 * @author trungnt
 * @see org.opencps.dossiermgt.service.impl.DossierLocalServiceImpl
 * @see org.opencps.dossiermgt.service.DossierLocalServiceUtil
 * @generated
 */
public abstract class DossierLocalServiceBaseImpl extends BaseLocalServiceImpl
	implements DossierLocalService, IdentifiableBean {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Always use {@link org.opencps.dossiermgt.service.DossierLocalServiceUtil} to access the dossier local service.
	 */

	/**
	 * Adds the dossier to the database. Also notifies the appropriate model listeners.
	 *
	 * @param dossier the dossier
	 * @return the dossier that was added
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public Dossier addDossier(Dossier dossier) throws SystemException {
		dossier.setNew(true);

		return dossierPersistence.update(dossier);
	}

	/**
	 * Creates a new dossier with the primary key. Does not add the dossier to the database.
	 *
	 * @param dossierId the primary key for the new dossier
	 * @return the new dossier
	 */
	@Override
	public Dossier createDossier(long dossierId) {
		return dossierPersistence.create(dossierId);
	}

	/**
	 * Deletes the dossier with the primary key from the database. Also notifies the appropriate model listeners.
	 *
	 * @param dossierId the primary key of the dossier
	 * @return the dossier that was removed
	 * @throws PortalException if a dossier with the primary key could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public Dossier deleteDossier(long dossierId)
		throws PortalException, SystemException {
		return dossierPersistence.remove(dossierId);
	}

	/**
	 * Deletes the dossier from the database. Also notifies the appropriate model listeners.
	 *
	 * @param dossier the dossier
	 * @return the dossier that was removed
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public Dossier deleteDossier(Dossier dossier) throws SystemException {
		return dossierPersistence.remove(dossier);
	}

	@Override
	public DynamicQuery dynamicQuery() {
		Class<?> clazz = getClass();

		return DynamicQueryFactoryUtil.forClass(Dossier.class,
			clazz.getClassLoader());
	}

	/**
	 * Performs a dynamic query on the database and returns the matching rows.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery)
		throws SystemException {
		return dossierPersistence.findWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Performs a dynamic query on the database and returns a range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link org.opencps.dossiermgt.model.impl.DossierModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @return the range of matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end)
		throws SystemException {
		return dossierPersistence.findWithDynamicQuery(dynamicQuery, start, end);
	}

	/**
	 * Performs a dynamic query on the database and returns an ordered range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link org.opencps.dossiermgt.model.impl.DossierModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the ordered range of matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end,
		OrderByComparator orderByComparator) throws SystemException {
		return dossierPersistence.findWithDynamicQuery(dynamicQuery, start,
			end, orderByComparator);
	}

	/**
	 * Returns the number of rows that match the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the number of rows that match the dynamic query
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery)
		throws SystemException {
		return dossierPersistence.countWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Returns the number of rows that match the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @param projection the projection to apply to the query
	 * @return the number of rows that match the dynamic query
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery,
		Projection projection) throws SystemException {
		return dossierPersistence.countWithDynamicQuery(dynamicQuery, projection);
	}

	@Override
	public Dossier fetchDossier(long dossierId) throws SystemException {
		return dossierPersistence.fetchByPrimaryKey(dossierId);
	}

	/**
	 * Returns the dossier with the primary key.
	 *
	 * @param dossierId the primary key of the dossier
	 * @return the dossier
	 * @throws PortalException if a dossier with the primary key could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public Dossier getDossier(long dossierId)
		throws PortalException, SystemException {
		return dossierPersistence.findByPrimaryKey(dossierId);
	}

	@Override
	public PersistedModel getPersistedModel(Serializable primaryKeyObj)
		throws PortalException, SystemException {
		return dossierPersistence.findByPrimaryKey(primaryKeyObj);
	}

	/**
	 * Returns a range of all the dossiers.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link org.opencps.dossiermgt.model.impl.DossierModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param start the lower bound of the range of dossiers
	 * @param end the upper bound of the range of dossiers (not inclusive)
	 * @return the range of dossiers
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public List<Dossier> getDossiers(int start, int end)
		throws SystemException {
		return dossierPersistence.findAll(start, end);
	}

	/**
	 * Returns the number of dossiers.
	 *
	 * @return the number of dossiers
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public int getDossiersCount() throws SystemException {
		return dossierPersistence.countAll();
	}

	/**
	 * Updates the dossier in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
	 *
	 * @param dossier the dossier
	 * @return the dossier that was updated
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public Dossier updateDossier(Dossier dossier) throws SystemException {
		return dossierPersistence.update(dossier);
	}

	/**
	 * Returns the dossier local service.
	 *
	 * @return the dossier local service
	 */
	public org.opencps.dossiermgt.service.DossierLocalService getDossierLocalService() {
		return dossierLocalService;
	}

	/**
	 * Sets the dossier local service.
	 *
	 * @param dossierLocalService the dossier local service
	 */
	public void setDossierLocalService(
		org.opencps.dossiermgt.service.DossierLocalService dossierLocalService) {
		this.dossierLocalService = dossierLocalService;
	}

	/**
	 * Returns the dossier remote service.
	 *
	 * @return the dossier remote service
	 */
	public org.opencps.dossiermgt.service.DossierService getDossierService() {
		return dossierService;
	}

	/**
	 * Sets the dossier remote service.
	 *
	 * @param dossierService the dossier remote service
	 */
	public void setDossierService(
		org.opencps.dossiermgt.service.DossierService dossierService) {
		this.dossierService = dossierService;
	}

	/**
	 * Returns the dossier persistence.
	 *
	 * @return the dossier persistence
	 */
	public DossierPersistence getDossierPersistence() {
		return dossierPersistence;
	}

	/**
	 * Sets the dossier persistence.
	 *
	 * @param dossierPersistence the dossier persistence
	 */
	public void setDossierPersistence(DossierPersistence dossierPersistence) {
		this.dossierPersistence = dossierPersistence;
	}

	/**
	 * Returns the dossier finder.
	 *
	 * @return the dossier finder
	 */
	public DossierFinder getDossierFinder() {
		return dossierFinder;
	}

	/**
	 * Sets the dossier finder.
	 *
	 * @param dossierFinder the dossier finder
	 */
	public void setDossierFinder(DossierFinder dossierFinder) {
		this.dossierFinder = dossierFinder;
	}

	/**
	 * Returns the dossier file local service.
	 *
	 * @return the dossier file local service
	 */
	public org.opencps.dossiermgt.service.DossierFileLocalService getDossierFileLocalService() {
		return dossierFileLocalService;
	}

	/**
	 * Sets the dossier file local service.
	 *
	 * @param dossierFileLocalService the dossier file local service
	 */
	public void setDossierFileLocalService(
		org.opencps.dossiermgt.service.DossierFileLocalService dossierFileLocalService) {
		this.dossierFileLocalService = dossierFileLocalService;
	}

	/**
	 * Returns the dossier file remote service.
	 *
	 * @return the dossier file remote service
	 */
	public org.opencps.dossiermgt.service.DossierFileService getDossierFileService() {
		return dossierFileService;
	}

	/**
	 * Sets the dossier file remote service.
	 *
	 * @param dossierFileService the dossier file remote service
	 */
	public void setDossierFileService(
		org.opencps.dossiermgt.service.DossierFileService dossierFileService) {
		this.dossierFileService = dossierFileService;
	}

	/**
	 * Returns the dossier file persistence.
	 *
	 * @return the dossier file persistence
	 */
	public DossierFilePersistence getDossierFilePersistence() {
		return dossierFilePersistence;
	}

	/**
	 * Sets the dossier file persistence.
	 *
	 * @param dossierFilePersistence the dossier file persistence
	 */
	public void setDossierFilePersistence(
		DossierFilePersistence dossierFilePersistence) {
		this.dossierFilePersistence = dossierFilePersistence;
	}

	/**
	 * Returns the dossier file finder.
	 *
	 * @return the dossier file finder
	 */
	public DossierFileFinder getDossierFileFinder() {
		return dossierFileFinder;
	}

	/**
	 * Sets the dossier file finder.
	 *
	 * @param dossierFileFinder the dossier file finder
	 */
	public void setDossierFileFinder(DossierFileFinder dossierFileFinder) {
		this.dossierFileFinder = dossierFileFinder;
	}

	/**
	 * Returns the dossier log local service.
	 *
	 * @return the dossier log local service
	 */
	public org.opencps.dossiermgt.service.DossierLogLocalService getDossierLogLocalService() {
		return dossierLogLocalService;
	}

	/**
	 * Sets the dossier log local service.
	 *
	 * @param dossierLogLocalService the dossier log local service
	 */
	public void setDossierLogLocalService(
		org.opencps.dossiermgt.service.DossierLogLocalService dossierLogLocalService) {
		this.dossierLogLocalService = dossierLogLocalService;
	}

	/**
	 * Returns the dossier log remote service.
	 *
	 * @return the dossier log remote service
	 */
	public org.opencps.dossiermgt.service.DossierLogService getDossierLogService() {
		return dossierLogService;
	}

	/**
	 * Sets the dossier log remote service.
	 *
	 * @param dossierLogService the dossier log remote service
	 */
	public void setDossierLogService(
		org.opencps.dossiermgt.service.DossierLogService dossierLogService) {
		this.dossierLogService = dossierLogService;
	}

	/**
	 * Returns the dossier log persistence.
	 *
	 * @return the dossier log persistence
	 */
	public DossierLogPersistence getDossierLogPersistence() {
		return dossierLogPersistence;
	}

	/**
	 * Sets the dossier log persistence.
	 *
	 * @param dossierLogPersistence the dossier log persistence
	 */
	public void setDossierLogPersistence(
		DossierLogPersistence dossierLogPersistence) {
		this.dossierLogPersistence = dossierLogPersistence;
	}

	/**
	 * Returns the dossier log finder.
	 *
	 * @return the dossier log finder
	 */
	public DossierLogFinder getDossierLogFinder() {
		return dossierLogFinder;
	}

	/**
	 * Sets the dossier log finder.
	 *
	 * @param dossierLogFinder the dossier log finder
	 */
	public void setDossierLogFinder(DossierLogFinder dossierLogFinder) {
		this.dossierLogFinder = dossierLogFinder;
	}

	/**
	 * Returns the dossier part local service.
	 *
	 * @return the dossier part local service
	 */
	public org.opencps.dossiermgt.service.DossierPartLocalService getDossierPartLocalService() {
		return dossierPartLocalService;
	}

	/**
	 * Sets the dossier part local service.
	 *
	 * @param dossierPartLocalService the dossier part local service
	 */
	public void setDossierPartLocalService(
		org.opencps.dossiermgt.service.DossierPartLocalService dossierPartLocalService) {
		this.dossierPartLocalService = dossierPartLocalService;
	}

	/**
	 * Returns the dossier part remote service.
	 *
	 * @return the dossier part remote service
	 */
	public org.opencps.dossiermgt.service.DossierPartService getDossierPartService() {
		return dossierPartService;
	}

	/**
	 * Sets the dossier part remote service.
	 *
	 * @param dossierPartService the dossier part remote service
	 */
	public void setDossierPartService(
		org.opencps.dossiermgt.service.DossierPartService dossierPartService) {
		this.dossierPartService = dossierPartService;
	}

	/**
	 * Returns the dossier part persistence.
	 *
	 * @return the dossier part persistence
	 */
	public DossierPartPersistence getDossierPartPersistence() {
		return dossierPartPersistence;
	}

	/**
	 * Sets the dossier part persistence.
	 *
	 * @param dossierPartPersistence the dossier part persistence
	 */
	public void setDossierPartPersistence(
		DossierPartPersistence dossierPartPersistence) {
		this.dossierPartPersistence = dossierPartPersistence;
	}

	/**
	 * Returns the dossier status local service.
	 *
	 * @return the dossier status local service
	 */
	public org.opencps.dossiermgt.service.DossierStatusLocalService getDossierStatusLocalService() {
		return dossierStatusLocalService;
	}

	/**
	 * Sets the dossier status local service.
	 *
	 * @param dossierStatusLocalService the dossier status local service
	 */
	public void setDossierStatusLocalService(
		org.opencps.dossiermgt.service.DossierStatusLocalService dossierStatusLocalService) {
		this.dossierStatusLocalService = dossierStatusLocalService;
	}

	/**
	 * Returns the dossier status remote service.
	 *
	 * @return the dossier status remote service
	 */
	public org.opencps.dossiermgt.service.DossierStatusService getDossierStatusService() {
		return dossierStatusService;
	}

	/**
	 * Sets the dossier status remote service.
	 *
	 * @param dossierStatusService the dossier status remote service
	 */
	public void setDossierStatusService(
		org.opencps.dossiermgt.service.DossierStatusService dossierStatusService) {
		this.dossierStatusService = dossierStatusService;
	}

	/**
	 * Returns the dossier status persistence.
	 *
	 * @return the dossier status persistence
	 */
	public DossierStatusPersistence getDossierStatusPersistence() {
		return dossierStatusPersistence;
	}

	/**
	 * Sets the dossier status persistence.
	 *
	 * @param dossierStatusPersistence the dossier status persistence
	 */
	public void setDossierStatusPersistence(
		DossierStatusPersistence dossierStatusPersistence) {
		this.dossierStatusPersistence = dossierStatusPersistence;
	}

	/**
	 * Returns the dossier template local service.
	 *
	 * @return the dossier template local service
	 */
	public org.opencps.dossiermgt.service.DossierTemplateLocalService getDossierTemplateLocalService() {
		return dossierTemplateLocalService;
	}

	/**
	 * Sets the dossier template local service.
	 *
	 * @param dossierTemplateLocalService the dossier template local service
	 */
	public void setDossierTemplateLocalService(
		org.opencps.dossiermgt.service.DossierTemplateLocalService dossierTemplateLocalService) {
		this.dossierTemplateLocalService = dossierTemplateLocalService;
	}

	/**
	 * Returns the dossier template remote service.
	 *
	 * @return the dossier template remote service
	 */
	public org.opencps.dossiermgt.service.DossierTemplateService getDossierTemplateService() {
		return dossierTemplateService;
	}

	/**
	 * Sets the dossier template remote service.
	 *
	 * @param dossierTemplateService the dossier template remote service
	 */
	public void setDossierTemplateService(
		org.opencps.dossiermgt.service.DossierTemplateService dossierTemplateService) {
		this.dossierTemplateService = dossierTemplateService;
	}

	/**
	 * Returns the dossier template persistence.
	 *
	 * @return the dossier template persistence
	 */
	public DossierTemplatePersistence getDossierTemplatePersistence() {
		return dossierTemplatePersistence;
	}

	/**
	 * Sets the dossier template persistence.
	 *
	 * @param dossierTemplatePersistence the dossier template persistence
	 */
	public void setDossierTemplatePersistence(
		DossierTemplatePersistence dossierTemplatePersistence) {
		this.dossierTemplatePersistence = dossierTemplatePersistence;
	}

	/**
	 * Returns the file group local service.
	 *
	 * @return the file group local service
	 */
	public org.opencps.dossiermgt.service.FileGroupLocalService getFileGroupLocalService() {
		return fileGroupLocalService;
	}

	/**
	 * Sets the file group local service.
	 *
	 * @param fileGroupLocalService the file group local service
	 */
	public void setFileGroupLocalService(
		org.opencps.dossiermgt.service.FileGroupLocalService fileGroupLocalService) {
		this.fileGroupLocalService = fileGroupLocalService;
	}

	/**
	 * Returns the file group remote service.
	 *
	 * @return the file group remote service
	 */
	public org.opencps.dossiermgt.service.FileGroupService getFileGroupService() {
		return fileGroupService;
	}

	/**
	 * Sets the file group remote service.
	 *
	 * @param fileGroupService the file group remote service
	 */
	public void setFileGroupService(
		org.opencps.dossiermgt.service.FileGroupService fileGroupService) {
		this.fileGroupService = fileGroupService;
	}

	/**
	 * Returns the file group persistence.
	 *
	 * @return the file group persistence
	 */
	public FileGroupPersistence getFileGroupPersistence() {
		return fileGroupPersistence;
	}

	/**
	 * Sets the file group persistence.
	 *
	 * @param fileGroupPersistence the file group persistence
	 */
	public void setFileGroupPersistence(
		FileGroupPersistence fileGroupPersistence) {
		this.fileGroupPersistence = fileGroupPersistence;
	}

	/**
	 * Returns the service config local service.
	 *
	 * @return the service config local service
	 */
	public org.opencps.dossiermgt.service.ServiceConfigLocalService getServiceConfigLocalService() {
		return serviceConfigLocalService;
	}

	/**
	 * Sets the service config local service.
	 *
	 * @param serviceConfigLocalService the service config local service
	 */
	public void setServiceConfigLocalService(
		org.opencps.dossiermgt.service.ServiceConfigLocalService serviceConfigLocalService) {
		this.serviceConfigLocalService = serviceConfigLocalService;
	}

	/**
	 * Returns the service config remote service.
	 *
	 * @return the service config remote service
	 */
	public org.opencps.dossiermgt.service.ServiceConfigService getServiceConfigService() {
		return serviceConfigService;
	}

	/**
	 * Sets the service config remote service.
	 *
	 * @param serviceConfigService the service config remote service
	 */
	public void setServiceConfigService(
		org.opencps.dossiermgt.service.ServiceConfigService serviceConfigService) {
		this.serviceConfigService = serviceConfigService;
	}

	/**
	 * Returns the service config persistence.
	 *
	 * @return the service config persistence
	 */
	public ServiceConfigPersistence getServiceConfigPersistence() {
		return serviceConfigPersistence;
	}

	/**
	 * Sets the service config persistence.
	 *
	 * @param serviceConfigPersistence the service config persistence
	 */
	public void setServiceConfigPersistence(
		ServiceConfigPersistence serviceConfigPersistence) {
		this.serviceConfigPersistence = serviceConfigPersistence;
	}

	/**
	 * Returns the service config finder.
	 *
	 * @return the service config finder
	 */
	public ServiceConfigFinder getServiceConfigFinder() {
		return serviceConfigFinder;
	}

	/**
	 * Sets the service config finder.
	 *
	 * @param serviceConfigFinder the service config finder
	 */
	public void setServiceConfigFinder(ServiceConfigFinder serviceConfigFinder) {
		this.serviceConfigFinder = serviceConfigFinder;
	}

	/**
	 * Returns the counter local service.
	 *
	 * @return the counter local service
	 */
	public com.liferay.counter.service.CounterLocalService getCounterLocalService() {
		return counterLocalService;
	}

	/**
	 * Sets the counter local service.
	 *
	 * @param counterLocalService the counter local service
	 */
	public void setCounterLocalService(
		com.liferay.counter.service.CounterLocalService counterLocalService) {
		this.counterLocalService = counterLocalService;
	}

	/**
	 * Returns the resource local service.
	 *
	 * @return the resource local service
	 */
	public com.liferay.portal.service.ResourceLocalService getResourceLocalService() {
		return resourceLocalService;
	}

	/**
	 * Sets the resource local service.
	 *
	 * @param resourceLocalService the resource local service
	 */
	public void setResourceLocalService(
		com.liferay.portal.service.ResourceLocalService resourceLocalService) {
		this.resourceLocalService = resourceLocalService;
	}

	/**
	 * Returns the user local service.
	 *
	 * @return the user local service
	 */
	public com.liferay.portal.service.UserLocalService getUserLocalService() {
		return userLocalService;
	}

	/**
	 * Sets the user local service.
	 *
	 * @param userLocalService the user local service
	 */
	public void setUserLocalService(
		com.liferay.portal.service.UserLocalService userLocalService) {
		this.userLocalService = userLocalService;
	}

	/**
	 * Returns the user remote service.
	 *
	 * @return the user remote service
	 */
	public com.liferay.portal.service.UserService getUserService() {
		return userService;
	}

	/**
	 * Sets the user remote service.
	 *
	 * @param userService the user remote service
	 */
	public void setUserService(
		com.liferay.portal.service.UserService userService) {
		this.userService = userService;
	}

	/**
	 * Returns the user persistence.
	 *
	 * @return the user persistence
	 */
	public UserPersistence getUserPersistence() {
		return userPersistence;
	}

	/**
	 * Sets the user persistence.
	 *
	 * @param userPersistence the user persistence
	 */
	public void setUserPersistence(UserPersistence userPersistence) {
		this.userPersistence = userPersistence;
	}

	/**
	 * Returns the asset entry local service.
	 *
	 * @return the asset entry local service
	 */
	public com.liferay.portlet.asset.service.AssetEntryLocalService getAssetEntryLocalService() {
		return assetEntryLocalService;
	}

	/**
	 * Sets the asset entry local service.
	 *
	 * @param assetEntryLocalService the asset entry local service
	 */
	public void setAssetEntryLocalService(
		com.liferay.portlet.asset.service.AssetEntryLocalService assetEntryLocalService) {
		this.assetEntryLocalService = assetEntryLocalService;
	}

	/**
	 * Returns the asset entry remote service.
	 *
	 * @return the asset entry remote service
	 */
	public com.liferay.portlet.asset.service.AssetEntryService getAssetEntryService() {
		return assetEntryService;
	}

	/**
	 * Sets the asset entry remote service.
	 *
	 * @param assetEntryService the asset entry remote service
	 */
	public void setAssetEntryService(
		com.liferay.portlet.asset.service.AssetEntryService assetEntryService) {
		this.assetEntryService = assetEntryService;
	}

	/**
	 * Returns the asset entry persistence.
	 *
	 * @return the asset entry persistence
	 */
	public AssetEntryPersistence getAssetEntryPersistence() {
		return assetEntryPersistence;
	}

	/**
	 * Sets the asset entry persistence.
	 *
	 * @param assetEntryPersistence the asset entry persistence
	 */
	public void setAssetEntryPersistence(
		AssetEntryPersistence assetEntryPersistence) {
		this.assetEntryPersistence = assetEntryPersistence;
	}

	/**
	 * Returns the document library file entry local service.
	 *
	 * @return the document library file entry local service
	 */
	public com.liferay.portlet.documentlibrary.service.DLFileEntryLocalService getDLFileEntryLocalService() {
		return dlFileEntryLocalService;
	}

	/**
	 * Sets the document library file entry local service.
	 *
	 * @param dlFileEntryLocalService the document library file entry local service
	 */
	public void setDLFileEntryLocalService(
		com.liferay.portlet.documentlibrary.service.DLFileEntryLocalService dlFileEntryLocalService) {
		this.dlFileEntryLocalService = dlFileEntryLocalService;
	}

	/**
	 * Returns the document library file entry remote service.
	 *
	 * @return the document library file entry remote service
	 */
	public com.liferay.portlet.documentlibrary.service.DLFileEntryService getDLFileEntryService() {
		return dlFileEntryService;
	}

	/**
	 * Sets the document library file entry remote service.
	 *
	 * @param dlFileEntryService the document library file entry remote service
	 */
	public void setDLFileEntryService(
		com.liferay.portlet.documentlibrary.service.DLFileEntryService dlFileEntryService) {
		this.dlFileEntryService = dlFileEntryService;
	}

	/**
	 * Returns the document library file entry persistence.
	 *
	 * @return the document library file entry persistence
	 */
	public DLFileEntryPersistence getDLFileEntryPersistence() {
		return dlFileEntryPersistence;
	}

	/**
	 * Sets the document library file entry persistence.
	 *
	 * @param dlFileEntryPersistence the document library file entry persistence
	 */
	public void setDLFileEntryPersistence(
		DLFileEntryPersistence dlFileEntryPersistence) {
		this.dlFileEntryPersistence = dlFileEntryPersistence;
	}

	/**
	 * Returns the document library folder local service.
	 *
	 * @return the document library folder local service
	 */
	public com.liferay.portlet.documentlibrary.service.DLFolderLocalService getDLFolderLocalService() {
		return dlFolderLocalService;
	}

	/**
	 * Sets the document library folder local service.
	 *
	 * @param dlFolderLocalService the document library folder local service
	 */
	public void setDLFolderLocalService(
		com.liferay.portlet.documentlibrary.service.DLFolderLocalService dlFolderLocalService) {
		this.dlFolderLocalService = dlFolderLocalService;
	}

	/**
	 * Returns the document library folder remote service.
	 *
	 * @return the document library folder remote service
	 */
	public com.liferay.portlet.documentlibrary.service.DLFolderService getDLFolderService() {
		return dlFolderService;
	}

	/**
	 * Sets the document library folder remote service.
	 *
	 * @param dlFolderService the document library folder remote service
	 */
	public void setDLFolderService(
		com.liferay.portlet.documentlibrary.service.DLFolderService dlFolderService) {
		this.dlFolderService = dlFolderService;
	}

	/**
	 * Returns the document library folder persistence.
	 *
	 * @return the document library folder persistence
	 */
	public DLFolderPersistence getDLFolderPersistence() {
		return dlFolderPersistence;
	}

	/**
	 * Sets the document library folder persistence.
	 *
	 * @param dlFolderPersistence the document library folder persistence
	 */
	public void setDLFolderPersistence(DLFolderPersistence dlFolderPersistence) {
		this.dlFolderPersistence = dlFolderPersistence;
	}

	/**
	 * Returns the Payment file local service.
	 *
	 * @return the Payment file local service
	 */
	public org.opencps.paymentmgt.service.PaymentFileLocalService getPaymentFileLocalService() {
		return paymentFileLocalService;
	}

	/**
	 * Sets the Payment file local service.
	 *
	 * @param paymentFileLocalService the Payment file local service
	 */
	public void setPaymentFileLocalService(
		org.opencps.paymentmgt.service.PaymentFileLocalService paymentFileLocalService) {
		this.paymentFileLocalService = paymentFileLocalService;
	}

	/**
	 * Returns the Payment file remote service.
	 *
	 * @return the Payment file remote service
	 */
	public org.opencps.paymentmgt.service.PaymentFileService getPaymentFileService() {
		return paymentFileService;
	}

	/**
	 * Sets the Payment file remote service.
	 *
	 * @param paymentFileService the Payment file remote service
	 */
	public void setPaymentFileService(
		org.opencps.paymentmgt.service.PaymentFileService paymentFileService) {
		this.paymentFileService = paymentFileService;
	}

	/**
	 * Returns the Payment file persistence.
	 *
	 * @return the Payment file persistence
	 */
	public PaymentFilePersistence getPaymentFilePersistence() {
		return paymentFilePersistence;
	}

	/**
	 * Sets the Payment file persistence.
	 *
	 * @param paymentFilePersistence the Payment file persistence
	 */
	public void setPaymentFilePersistence(
		PaymentFilePersistence paymentFilePersistence) {
		this.paymentFilePersistence = paymentFilePersistence;
	}

	/**
	 * Returns the Payment file finder.
	 *
	 * @return the Payment file finder
	 */
	public PaymentFileFinder getPaymentFileFinder() {
		return paymentFileFinder;
	}

	/**
	 * Sets the Payment file finder.
	 *
	 * @param paymentFileFinder the Payment file finder
	 */
	public void setPaymentFileFinder(PaymentFileFinder paymentFileFinder) {
		this.paymentFileFinder = paymentFileFinder;
	}

	public void afterPropertiesSet() {
		Class<?> clazz = getClass();

		_classLoader = clazz.getClassLoader();

		PersistedModelLocalServiceRegistryUtil.register("org.opencps.dossiermgt.model.Dossier",
			dossierLocalService);
	}

	public void destroy() {
		PersistedModelLocalServiceRegistryUtil.unregister(
			"org.opencps.dossiermgt.model.Dossier");
	}

	/**
	 * Returns the Spring bean ID for this bean.
	 *
	 * @return the Spring bean ID for this bean
	 */
	@Override
	public String getBeanIdentifier() {
		return _beanIdentifier;
	}

	/**
	 * Sets the Spring bean ID for this bean.
	 *
	 * @param beanIdentifier the Spring bean ID for this bean
	 */
	@Override
	public void setBeanIdentifier(String beanIdentifier) {
		_beanIdentifier = beanIdentifier;
	}

	@Override
	public Object invokeMethod(String name, String[] parameterTypes,
		Object[] arguments) throws Throwable {
		Thread currentThread = Thread.currentThread();

		ClassLoader contextClassLoader = currentThread.getContextClassLoader();

		if (contextClassLoader != _classLoader) {
			currentThread.setContextClassLoader(_classLoader);
		}

		try {
			return _clpInvoker.invokeMethod(name, parameterTypes, arguments);
		}
		finally {
			if (contextClassLoader != _classLoader) {
				currentThread.setContextClassLoader(contextClassLoader);
			}
		}
	}

	protected Class<?> getModelClass() {
		return Dossier.class;
	}

	protected String getModelClassName() {
		return Dossier.class.getName();
	}

	/**
	 * Performs an SQL query.
	 *
	 * @param sql the sql query
	 */
	protected void runSQL(String sql) throws SystemException {
		try {
			DataSource dataSource = dossierPersistence.getDataSource();

			SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
					sql, new int[0]);

			sqlUpdate.update();
		}
		catch (Exception e) {
			throw new SystemException(e);
		}
	}

	@BeanReference(type = org.opencps.dossiermgt.service.DossierLocalService.class)
	protected org.opencps.dossiermgt.service.DossierLocalService dossierLocalService;
	@BeanReference(type = org.opencps.dossiermgt.service.DossierService.class)
	protected org.opencps.dossiermgt.service.DossierService dossierService;
	@BeanReference(type = DossierPersistence.class)
	protected DossierPersistence dossierPersistence;
	@BeanReference(type = DossierFinder.class)
	protected DossierFinder dossierFinder;
	@BeanReference(type = org.opencps.dossiermgt.service.DossierFileLocalService.class)
	protected org.opencps.dossiermgt.service.DossierFileLocalService dossierFileLocalService;
	@BeanReference(type = org.opencps.dossiermgt.service.DossierFileService.class)
	protected org.opencps.dossiermgt.service.DossierFileService dossierFileService;
	@BeanReference(type = DossierFilePersistence.class)
	protected DossierFilePersistence dossierFilePersistence;
	@BeanReference(type = DossierFileFinder.class)
	protected DossierFileFinder dossierFileFinder;
	@BeanReference(type = org.opencps.dossiermgt.service.DossierLogLocalService.class)
	protected org.opencps.dossiermgt.service.DossierLogLocalService dossierLogLocalService;
	@BeanReference(type = org.opencps.dossiermgt.service.DossierLogService.class)
	protected org.opencps.dossiermgt.service.DossierLogService dossierLogService;
	@BeanReference(type = DossierLogPersistence.class)
	protected DossierLogPersistence dossierLogPersistence;
	@BeanReference(type = DossierLogFinder.class)
	protected DossierLogFinder dossierLogFinder;
	@BeanReference(type = org.opencps.dossiermgt.service.DossierPartLocalService.class)
	protected org.opencps.dossiermgt.service.DossierPartLocalService dossierPartLocalService;
	@BeanReference(type = org.opencps.dossiermgt.service.DossierPartService.class)
	protected org.opencps.dossiermgt.service.DossierPartService dossierPartService;
	@BeanReference(type = DossierPartPersistence.class)
	protected DossierPartPersistence dossierPartPersistence;
	@BeanReference(type = org.opencps.dossiermgt.service.DossierStatusLocalService.class)
	protected org.opencps.dossiermgt.service.DossierStatusLocalService dossierStatusLocalService;
	@BeanReference(type = org.opencps.dossiermgt.service.DossierStatusService.class)
	protected org.opencps.dossiermgt.service.DossierStatusService dossierStatusService;
	@BeanReference(type = DossierStatusPersistence.class)
	protected DossierStatusPersistence dossierStatusPersistence;
	@BeanReference(type = org.opencps.dossiermgt.service.DossierTemplateLocalService.class)
	protected org.opencps.dossiermgt.service.DossierTemplateLocalService dossierTemplateLocalService;
	@BeanReference(type = org.opencps.dossiermgt.service.DossierTemplateService.class)
	protected org.opencps.dossiermgt.service.DossierTemplateService dossierTemplateService;
	@BeanReference(type = DossierTemplatePersistence.class)
	protected DossierTemplatePersistence dossierTemplatePersistence;
	@BeanReference(type = org.opencps.dossiermgt.service.FileGroupLocalService.class)
	protected org.opencps.dossiermgt.service.FileGroupLocalService fileGroupLocalService;
	@BeanReference(type = org.opencps.dossiermgt.service.FileGroupService.class)
	protected org.opencps.dossiermgt.service.FileGroupService fileGroupService;
	@BeanReference(type = FileGroupPersistence.class)
	protected FileGroupPersistence fileGroupPersistence;
	@BeanReference(type = org.opencps.dossiermgt.service.ServiceConfigLocalService.class)
	protected org.opencps.dossiermgt.service.ServiceConfigLocalService serviceConfigLocalService;
	@BeanReference(type = org.opencps.dossiermgt.service.ServiceConfigService.class)
	protected org.opencps.dossiermgt.service.ServiceConfigService serviceConfigService;
	@BeanReference(type = ServiceConfigPersistence.class)
	protected ServiceConfigPersistence serviceConfigPersistence;
	@BeanReference(type = ServiceConfigFinder.class)
	protected ServiceConfigFinder serviceConfigFinder;
	@BeanReference(type = com.liferay.counter.service.CounterLocalService.class)
	protected com.liferay.counter.service.CounterLocalService counterLocalService;
	@BeanReference(type = com.liferay.portal.service.ResourceLocalService.class)
	protected com.liferay.portal.service.ResourceLocalService resourceLocalService;
	@BeanReference(type = com.liferay.portal.service.UserLocalService.class)
	protected com.liferay.portal.service.UserLocalService userLocalService;
	@BeanReference(type = com.liferay.portal.service.UserService.class)
	protected com.liferay.portal.service.UserService userService;
	@BeanReference(type = UserPersistence.class)
	protected UserPersistence userPersistence;
	@BeanReference(type = com.liferay.portlet.asset.service.AssetEntryLocalService.class)
	protected com.liferay.portlet.asset.service.AssetEntryLocalService assetEntryLocalService;
	@BeanReference(type = com.liferay.portlet.asset.service.AssetEntryService.class)
	protected com.liferay.portlet.asset.service.AssetEntryService assetEntryService;
	@BeanReference(type = AssetEntryPersistence.class)
	protected AssetEntryPersistence assetEntryPersistence;
	@BeanReference(type = com.liferay.portlet.documentlibrary.service.DLFileEntryLocalService.class)
	protected com.liferay.portlet.documentlibrary.service.DLFileEntryLocalService dlFileEntryLocalService;
	@BeanReference(type = com.liferay.portlet.documentlibrary.service.DLFileEntryService.class)
	protected com.liferay.portlet.documentlibrary.service.DLFileEntryService dlFileEntryService;
	@BeanReference(type = DLFileEntryPersistence.class)
	protected DLFileEntryPersistence dlFileEntryPersistence;
	@BeanReference(type = com.liferay.portlet.documentlibrary.service.DLFolderLocalService.class)
	protected com.liferay.portlet.documentlibrary.service.DLFolderLocalService dlFolderLocalService;
	@BeanReference(type = com.liferay.portlet.documentlibrary.service.DLFolderService.class)
	protected com.liferay.portlet.documentlibrary.service.DLFolderService dlFolderService;
	@BeanReference(type = DLFolderPersistence.class)
	protected DLFolderPersistence dlFolderPersistence;
	@BeanReference(type = org.opencps.paymentmgt.service.PaymentFileLocalService.class)
	protected org.opencps.paymentmgt.service.PaymentFileLocalService paymentFileLocalService;
	@BeanReference(type = org.opencps.paymentmgt.service.PaymentFileService.class)
	protected org.opencps.paymentmgt.service.PaymentFileService paymentFileService;
	@BeanReference(type = PaymentFilePersistence.class)
	protected PaymentFilePersistence paymentFilePersistence;
	@BeanReference(type = PaymentFileFinder.class)
	protected PaymentFileFinder paymentFileFinder;
	private String _beanIdentifier;
	private ClassLoader _classLoader;
	private DossierLocalServiceClpInvoker _clpInvoker = new DossierLocalServiceClpInvoker();
}