/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package org.opencps.dossiermgt.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import org.opencps.dossiermgt.model.FileGroup;
import org.opencps.dossiermgt.model.FileGroupModel;
import org.opencps.dossiermgt.model.FileGroupSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the FileGroup service. Represents a row in the &quot;opencps_file_group&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link org.opencps.dossiermgt.model.FileGroupModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link FileGroupImpl}.
 * </p>
 *
 * @author trungnt
 * @see FileGroupImpl
 * @see org.opencps.dossiermgt.model.FileGroup
 * @see org.opencps.dossiermgt.model.FileGroupModel
 * @generated
 */
@JSON(strict = true)
public class FileGroupModelImpl extends BaseModelImpl<FileGroup>
	implements FileGroupModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a file group model instance should use the {@link org.opencps.dossiermgt.model.FileGroup} interface instead.
	 */
	public static final String TABLE_NAME = "opencps_file_group";
	public static final Object[][] TABLE_COLUMNS = {
			{ "fileGroupId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "oId", Types.VARCHAR },
			{ "dossierId", Types.BIGINT },
			{ "dossierPartId", Types.BIGINT },
			{ "displayName", Types.VARCHAR },
			{ "removed", Types.INTEGER },
			{ "syncStatus", Types.INTEGER }
		};
	public static final String TABLE_SQL_CREATE = "create table opencps_file_group (fileGroupId LONG not null primary key,companyId LONG,groupId LONG,userId LONG,createDate DATE null,modifiedDate DATE null,oId VARCHAR(75) null,dossierId LONG,dossierPartId LONG,displayName VARCHAR(75) null,removed INTEGER,syncStatus INTEGER)";
	public static final String TABLE_SQL_DROP = "drop table opencps_file_group";
	public static final String ORDER_BY_JPQL = " ORDER BY fileGroup.fileGroupId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY opencps_file_group.fileGroupId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.org.opencps.dossiermgt.model.FileGroup"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.org.opencps.dossiermgt.model.FileGroup"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.org.opencps.dossiermgt.model.FileGroup"),
			true);
	public static long DISPLAYNAME_COLUMN_BITMASK = 1L;
	public static long DOSSIERID_COLUMN_BITMASK = 2L;
	public static long DOSSIERPARTID_COLUMN_BITMASK = 4L;
	public static long FILEGROUPID_COLUMN_BITMASK = 8L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static FileGroup toModel(FileGroupSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		FileGroup model = new FileGroupImpl();

		model.setFileGroupId(soapModel.getFileGroupId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setGroupId(soapModel.getGroupId());
		model.setUserId(soapModel.getUserId());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setOId(soapModel.getOId());
		model.setDossierId(soapModel.getDossierId());
		model.setDossierPartId(soapModel.getDossierPartId());
		model.setDisplayName(soapModel.getDisplayName());
		model.setRemoved(soapModel.getRemoved());
		model.setSyncStatus(soapModel.getSyncStatus());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<FileGroup> toModels(FileGroupSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<FileGroup> models = new ArrayList<FileGroup>(soapModels.length);

		for (FileGroupSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.org.opencps.dossiermgt.model.FileGroup"));

	public FileGroupModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _fileGroupId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setFileGroupId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _fileGroupId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return FileGroup.class;
	}

	@Override
	public String getModelClassName() {
		return FileGroup.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("fileGroupId", getFileGroupId());
		attributes.put("companyId", getCompanyId());
		attributes.put("groupId", getGroupId());
		attributes.put("userId", getUserId());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("oId", getOId());
		attributes.put("dossierId", getDossierId());
		attributes.put("dossierPartId", getDossierPartId());
		attributes.put("displayName", getDisplayName());
		attributes.put("removed", getRemoved());
		attributes.put("syncStatus", getSyncStatus());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long fileGroupId = (Long)attributes.get("fileGroupId");

		if (fileGroupId != null) {
			setFileGroupId(fileGroupId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		String oId = (String)attributes.get("oId");

		if (oId != null) {
			setOId(oId);
		}

		Long dossierId = (Long)attributes.get("dossierId");

		if (dossierId != null) {
			setDossierId(dossierId);
		}

		Long dossierPartId = (Long)attributes.get("dossierPartId");

		if (dossierPartId != null) {
			setDossierPartId(dossierPartId);
		}

		String displayName = (String)attributes.get("displayName");

		if (displayName != null) {
			setDisplayName(displayName);
		}

		Integer removed = (Integer)attributes.get("removed");

		if (removed != null) {
			setRemoved(removed);
		}

		Integer syncStatus = (Integer)attributes.get("syncStatus");

		if (syncStatus != null) {
			setSyncStatus(syncStatus);
		}
	}

	@JSON
	@Override
	public long getFileGroupId() {
		return _fileGroupId;
	}

	@Override
	public void setFileGroupId(long fileGroupId) {
		_fileGroupId = fileGroupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_groupId = groupId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	@Override
	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getOId() {
		if (_oId == null) {
			return StringPool.BLANK;
		}
		else {
			return _oId;
		}
	}

	@Override
	public void setOId(String oId) {
		_oId = oId;
	}

	@JSON
	@Override
	public long getDossierId() {
		return _dossierId;
	}

	@Override
	public void setDossierId(long dossierId) {
		_columnBitmask |= DOSSIERID_COLUMN_BITMASK;

		if (!_setOriginalDossierId) {
			_setOriginalDossierId = true;

			_originalDossierId = _dossierId;
		}

		_dossierId = dossierId;
	}

	public long getOriginalDossierId() {
		return _originalDossierId;
	}

	@JSON
	@Override
	public long getDossierPartId() {
		return _dossierPartId;
	}

	@Override
	public void setDossierPartId(long dossierPartId) {
		_columnBitmask |= DOSSIERPARTID_COLUMN_BITMASK;

		if (!_setOriginalDossierPartId) {
			_setOriginalDossierPartId = true;

			_originalDossierPartId = _dossierPartId;
		}

		_dossierPartId = dossierPartId;
	}

	public long getOriginalDossierPartId() {
		return _originalDossierPartId;
	}

	@JSON
	@Override
	public String getDisplayName() {
		if (_displayName == null) {
			return StringPool.BLANK;
		}
		else {
			return _displayName;
		}
	}

	@Override
	public void setDisplayName(String displayName) {
		_columnBitmask |= DISPLAYNAME_COLUMN_BITMASK;

		if (_originalDisplayName == null) {
			_originalDisplayName = _displayName;
		}

		_displayName = displayName;
	}

	public String getOriginalDisplayName() {
		return GetterUtil.getString(_originalDisplayName);
	}

	@JSON
	@Override
	public int getRemoved() {
		return _removed;
	}

	@Override
	public void setRemoved(int removed) {
		_removed = removed;
	}

	@JSON
	@Override
	public int getSyncStatus() {
		return _syncStatus;
	}

	@Override
	public void setSyncStatus(int syncStatus) {
		_syncStatus = syncStatus;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			FileGroup.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public FileGroup toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (FileGroup)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		FileGroupImpl fileGroupImpl = new FileGroupImpl();

		fileGroupImpl.setFileGroupId(getFileGroupId());
		fileGroupImpl.setCompanyId(getCompanyId());
		fileGroupImpl.setGroupId(getGroupId());
		fileGroupImpl.setUserId(getUserId());
		fileGroupImpl.setCreateDate(getCreateDate());
		fileGroupImpl.setModifiedDate(getModifiedDate());
		fileGroupImpl.setOId(getOId());
		fileGroupImpl.setDossierId(getDossierId());
		fileGroupImpl.setDossierPartId(getDossierPartId());
		fileGroupImpl.setDisplayName(getDisplayName());
		fileGroupImpl.setRemoved(getRemoved());
		fileGroupImpl.setSyncStatus(getSyncStatus());

		fileGroupImpl.resetOriginalValues();

		return fileGroupImpl;
	}

	@Override
	public int compareTo(FileGroup fileGroup) {
		long primaryKey = fileGroup.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof FileGroup)) {
			return false;
		}

		FileGroup fileGroup = (FileGroup)obj;

		long primaryKey = fileGroup.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		FileGroupModelImpl fileGroupModelImpl = this;

		fileGroupModelImpl._originalDossierId = fileGroupModelImpl._dossierId;

		fileGroupModelImpl._setOriginalDossierId = false;

		fileGroupModelImpl._originalDossierPartId = fileGroupModelImpl._dossierPartId;

		fileGroupModelImpl._setOriginalDossierPartId = false;

		fileGroupModelImpl._originalDisplayName = fileGroupModelImpl._displayName;

		fileGroupModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<FileGroup> toCacheModel() {
		FileGroupCacheModel fileGroupCacheModel = new FileGroupCacheModel();

		fileGroupCacheModel.fileGroupId = getFileGroupId();

		fileGroupCacheModel.companyId = getCompanyId();

		fileGroupCacheModel.groupId = getGroupId();

		fileGroupCacheModel.userId = getUserId();

		Date createDate = getCreateDate();

		if (createDate != null) {
			fileGroupCacheModel.createDate = createDate.getTime();
		}
		else {
			fileGroupCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			fileGroupCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			fileGroupCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		fileGroupCacheModel.oId = getOId();

		String oId = fileGroupCacheModel.oId;

		if ((oId != null) && (oId.length() == 0)) {
			fileGroupCacheModel.oId = null;
		}

		fileGroupCacheModel.dossierId = getDossierId();

		fileGroupCacheModel.dossierPartId = getDossierPartId();

		fileGroupCacheModel.displayName = getDisplayName();

		String displayName = fileGroupCacheModel.displayName;

		if ((displayName != null) && (displayName.length() == 0)) {
			fileGroupCacheModel.displayName = null;
		}

		fileGroupCacheModel.removed = getRemoved();

		fileGroupCacheModel.syncStatus = getSyncStatus();

		return fileGroupCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(25);

		sb.append("{fileGroupId=");
		sb.append(getFileGroupId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", oId=");
		sb.append(getOId());
		sb.append(", dossierId=");
		sb.append(getDossierId());
		sb.append(", dossierPartId=");
		sb.append(getDossierPartId());
		sb.append(", displayName=");
		sb.append(getDisplayName());
		sb.append(", removed=");
		sb.append(getRemoved());
		sb.append(", syncStatus=");
		sb.append(getSyncStatus());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(40);

		sb.append("<model><model-name>");
		sb.append("org.opencps.dossiermgt.model.FileGroup");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>fileGroupId</column-name><column-value><![CDATA[");
		sb.append(getFileGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>oId</column-name><column-value><![CDATA[");
		sb.append(getOId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>dossierId</column-name><column-value><![CDATA[");
		sb.append(getDossierId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>dossierPartId</column-name><column-value><![CDATA[");
		sb.append(getDossierPartId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>displayName</column-name><column-value><![CDATA[");
		sb.append(getDisplayName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>removed</column-name><column-value><![CDATA[");
		sb.append(getRemoved());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>syncStatus</column-name><column-value><![CDATA[");
		sb.append(getSyncStatus());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = FileGroup.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			FileGroup.class
		};
	private long _fileGroupId;
	private long _companyId;
	private long _groupId;
	private long _userId;
	private String _userUuid;
	private Date _createDate;
	private Date _modifiedDate;
	private String _oId;
	private long _dossierId;
	private long _originalDossierId;
	private boolean _setOriginalDossierId;
	private long _dossierPartId;
	private long _originalDossierPartId;
	private boolean _setOriginalDossierPartId;
	private String _displayName;
	private String _originalDisplayName;
	private int _removed;
	private int _syncStatus;
	private long _columnBitmask;
	private FileGroup _escapedModel;
}